* Introduction
This is my personal Emacs init file in org.
* Basic config
:LOGBOOK:
CLOCK: [2022-01-26 Wed 17:05]--[2022-01-26 Wed 17:15] =>  0:10
:END:
Some very basic config of my own.
This was called "utils" before being compiled into this file.
#+begin_src emacs-lisp :tangle yes
(defun is-gnu-linux ()
  "Return true is the current os is gnu/linux"
  (string-equal system-type "gnu/linux"))

(defun get-wd ()
  "Get my working directory"
  (if
      (is-gnu-linux)
      "/mnt/c/Users/thoma/Dev"
    "~/Dev"))

(defun get-workspace(&optional ver)
  "Get Workspace. If `ver' is set then it's that Clover version's workspace."
  (let ((prefix (mapconcat 'file-name-as-directory `(,(expand-file-name "~") "Documents" "workspace") "")))
    (if ver
        (replace-regexp-in-string "workspace" (concat "workspace" "_" (number-to-string ver)) prefix)
      prefix)))

(setq initial-buffer-choice
      ;; We have to use find-file to open the buffer
      ;; because initial-buffer-choice selects the buffer the function returns.
      ;; instead of visiting/finding the file/directory when given a string.
      (lambda nil
        (find-file
         (get-wd))))
(add-to-list 'load-path "~/.emacs.d/elpa/")
#+end_src
* straight
:LOGBOOK:
CLOCK: [2022-01-25 Tue 20:10]--[2022-01-25 Tue 21:10] =>  1:00
CLOCK: [2022-01-05 Wed 22:07]--[2022-01-05 Wed 22:37] =>  0:30
CLOCK: [2022-01-05 Wed 18:23]--[2022-01-05 Wed 18:30] =>  0:07
CLOCK: [2022-01-05 Wed 16:18]--[2022-01-05 Wed 17:22] =>  1:04
:END:
https://systemcrafters.cc/advanced-package-management/using-straight-el/
#+begin_src emacs-lisp :tangle yes
(straight-use-package 'use-package)
#+end_src
* quelpa
#+begin_src emacs-lisp :tangle yes
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
#+end_src
* ein
:LOGBOOK:
CLOCK: [2022-01-20 Thu 09:06]--[2022-01-20 Thu 09:23] =>  0:17
CLOCK: [2022-01-20 Thu 08:54]--[2022-01-20 Thu 08:59] =>  0:05
:END:
Use straight to manage ein.
#+begin_src emacs-lisp :tangle yes
(use-package ein
  :straight t
  :init
  (setq ein:output-area-inlined-images t)
  (setq ein:polymode t)
  (setq ob-ein-languages
        '(("ein-python" . python)
          ("ein-R" . R)
          ("ein-r" . R)
          ("ein-julia" . julia)))
  (setq org-babel-load-languages
        '((js . t)
          (java . t)
          (python . t)
          (emacs-lisp . t)
          (shell . t)
          (ditaa . t)
          (ein . t))))
#+end_src
* elpy
:LOGBOOK:
CLOCK: [2022-02-06 Sun 20:25]--[2022-02-06 Sun 21:03] =>  0:38
:END:
#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :straight t
  :init
  (elpy-enable)
  (setq elpy-shell-echo-output nil)
  (setq python-shell-completion-native-enable nil)
  (setq elpy-rpc-backend "jedi")
  (setq python-indent-offset 4
        python-indent 4)
  (my-global-leader
	"g d" 'elpy-goto-definition)
  (my-global-leader
	"g a" 'elpy-goto-assignment)
  (define-key elpy-mode-map (kbd "C-o") 'xref-pop-marker-stack)
  (setq elpy-rpc-timeout 10)
  )
;; jedi
;; (add-hook 'python-mode-hook 'jedi:setup)
;; (setq jedi:complete-on-dot t)    ; ptional
;; (setq ac-max-width 0.4)

(use-package company-quickhelp
  :straight t
  :config
  (company-quickhelp-mode 1)
  (eval-after-load 'company
	'(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)))
#+end_src
* cnfonts
~cnfonts~ might not work with some fonts. Also need to make sure that the fonts that you want to use are both in the system and in the ~cnfonts--custom-set-fontnames~. See [[https://github.com/tumashu/cnfonts/issues/113][my issue]].
#+begin_src emacs-lisp :tangle yes
(use-package cnfonts
  :config
  ;; 让 cnfonts 随着 Emacs 自动生效。
  (cnfonts-enable)
  (setq cnfonts-profiles
        '("program" "org-mode" "read-book")))
;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
;; (cnfonts-set-spacemacs-fallback-fonts)
#+end_src

#+caption: Testing table of cnfonts
#+name: Testing table of cnfonts
| h1   | h1   |
| 中文 | 中文 |
* eshell
Extracted from here: http://www.modernemacs.com/post/custom-eshell/

Code: https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5
#+begin_src emacs-lisp :tangle yes

(require 'cl)
(require 'dash)
(require 's)

(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &rest PROPS)
  "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  `(setq ,NAME
         (lambda () (when ,FORM
                                        ;< this left angle bracket was added so that org mode matches it with the following one
                      (-> ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  "Accumulator for evaluating and concatenating esh-sections."
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  "Build `eshell-prompt-function'"
  (concat esh-header
          (-reduce-from 'esh-acc "" eshell-funcs)
          "\n"
          eshell-prompt-string))

;; Separator between esh-sections
(setq esh-sep "  ") ;; r " | "

;; Separator between an esh-section icon and form
(setq esh-section-delim " ")

;; Eshell prompt header
(setq esh-header "\n ") ;; r "\n┌─"

;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
;; your login, these can be the same.
(setq eshell-prompt-regexp "└─> ")  ;; r "└─> "
(setq eshell-prompt-string "└─> ")  ;; r "└─> "

(esh-section esh-dir
             "\xf07c" ;;  (faicon folder)
                                        ;"fake-dir"
             (abbreviate-file-name (eshell/pwd))
             '(:foreground "gold" :bold ultra-bold :underline t))

(esh-section esh-git
                                        ;"\xe907" ;;  (git icon)
             ""
             (magit-get-current-branch)
             '(:foreground "pink"))

(esh-section esh-python
             "\xe928" ;;  (python icon)
             venv-current-name
             '(:foreground "pink"))

(esh-section esh-clock
             "\xf017" ;;  (clock icon)
                                        ;"fake-clock"
             (format-time-string "%H:%M" (current-time))
             '(:foreground "forest green"))

;; Below I implement a "prompt number" section
(setq esh-prompt-num 0)
(add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
(advice-add 'eshell-send-input :before
            (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             "\xf0c9" ;;  (list icon)
                                        ;"fake-num"
             (number-to-string esh-prompt-num)
             '(:foreground "brown"))

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-clock esh-python esh-num))

;; Enable the new eshell prompt
(setq eshell-prompt-function 'esh-prompt-func)
#+end_src
* Keymaps
#+begin_src emacs-lisp :tangle yes
(use-package general
  :straight t)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     Functions for key bindings    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         Global keybindings        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-previous-window()
  "Go to the previous window"
  (interactive)
  (other-window -1))
(general-define-key
 :states '(motion visual normal)
 :keymaps 'override
 ;;  -> redo
 "r" 'undo-tree-redo
 "0" 'delete-window
 "1" 'my-previous-window
 "2" 'other-window
 "3" 'split-window-right
 "4" 'split-window-below
 "5" 'delete-other-windows

 )
;; Remap SPC in evil mode to a leader key
(general-create-definer my-global-leader
  :states '(normal motion visual insert)
  :keymaps 'override
  ;; :prefix my-leader
  :prefix "SPC"
  :non-normal-prefix "C-SPC")

(general-create-definer my-global-text-leader
  ;; for faster text operations
  :prefix ",")

(general-create-definer my-global-misc-leader
  ;; for future operations
  :prefix "m")

;; Remap SPC o to org mode leader key
(general-create-definer yaoni-org-leader-def
  :states '(normal visual insert)
  :prefix "SPC o"
  :non-normal-prefix "C-c")

(general-create-definer yaoni-tag-leader-def
  :states '(normal visual insert)
  :prefix "SPC n"
  :non-normal-prefix "C-c n")

(my-global-text-leader
  :states '(motion normal)
  :keymaps 'override

  "e" 'evil-end-of-line
  "b" 'evil-beginning-of-line
  "a" 'evil-append-line
  )

(my-global-leader


  ;;  -> load
  "l i" (lambda() (interactive) (load-file "~/.emacs.d/init.el"))
  "o a" 'org-agenda
  "." 'evil-repeat

                                        ;  -> delete
  "d o w" 'delete-other-windows
  ;;  -> run

  ;; Ivy version of ‘execute-extended-command’.
  ;; https://github.com/abo-abo/swiper/issues/294#issuecomment-157871131
  "e" 'counsel-M-x

  ;;  -> switch
  ;; witch to buffer
  "s b" 'switch-to-buffer
  "s f" 'other-frame
  "s w l" 'evil-window-right
  "s w h" 'evil-window-left
  "s w k" 'evil-window-up
  "s w j" 'evil-window-down

  ;;  -> search
  "s i" 'isearch-forward

  ;;  -> search grep current directory
  ;; "s g c"
  ;;  -> search grep project directory (where .git/ is)
  "s g p" 'counsel-git-grep

  ;;  -> search grep filename (where .git/ is)
  "s g f" 'counsel-git

  ;;  -> write
  "w b" 'save-buffer

  ;;  -> open
  "o f" 'counsel-find-file
  ;; et-key expects an interactive command
  "o i" (lambda() (interactive) (find-file "~/.emacs.d"))
  ;; rame size
  ;; nc frame width
  "i f w" 'inc-frame-width
  "d f w" 'dec-frame-width
  "i f h" 'inc-frame-height
  "d f h" 'dec-frame-height

  ;; agit-status
  "m s" 'magit-status


  ;; X command
  "x" 'evil-ex

  "k" 'kill-buffer

  "h s" 'hs-toggle-hiding
  "v w" 'venv-workon

  "g t" 'git-timemachine-toggle

  ;; don't confirm revert-buffer
  "r b" '(lambda() (interactive) (revert-buffer nil t))

  "v c" 'vc-msg-show
  )



(with-eval-after-load 'gif-screencast
  (define-key gif-screencast-mode-map (kbd "<f8>") 'gif-screencast-toggle-pause)
  (define-key gif-screencast-mode-map (kbd "<f9>") 'gif-screencast-stop))

;; auto-complete
(with-eval-after-load 'auto-complete
  (define-key ac-complete-mode-map "\C-n" 'ac-next)
  (define-key ac-complete-mode-map "\C-p" 'ac-previous))
#+end_src
** Jumping between parens (sexp)
#+begin_src elisp :tangle yes
(my-global-leader

  "m f" 'forward-sexp
  "m b" 'backward-sexp
)
#+end_src

* Smartparens
Lisp editing.
#+begin_src elisp :tangle yes
(use-package smartparens-config
  :ensure smartparens
  :config
  (progn
    (show-smartparens-global-mode t)
    (my-global-leader
      "s s f" 'sp-forward-slurp-sexp
      "s s b" 'sp-backward-slurp-sexp
      ;; barf - vomit - v
      "s v f" 'sp-forward-barf-sexp
      "s v b" 'sp-backward-barf-sexp
      "s w r" 'sp-wrap-round
      "s w c" 'sp-unwrap-sexp)))
;; might not work in PHP but I don't program PHP.
(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
;; in org mode there are a lot of non-matching parens so ignore them.
;; (add-hook 'org-mode-hook 'turn-on-smartparens-strict-mode)

#+end_src
* Evil
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :init
  ;; evil org
  (setq evil-want-keybinding nil)
  ;; enable TAB in terminal mode
  ;; https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working
  (setq evil-want-C-i-jump nil)
  :config
  (when (require 'evil-collection nil t)
    (evil-collection-init)))

(use-package evil-org
  :straight t
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar)))
(use-package evil-org-agenda
  :config
  (evil-org-agenda-set-keys)
  (evil-mode 1))

;; evil surround
(use-package evil-surround
  :straight t
  :config
  (global-evil-surround-mode 1))
;; org-brain using evil
;; (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
#+end_src
* Magit
Magit settings.
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :straight t
  :init
  ;; call this function so that eshell can use magit-get-current-branch.
  ;; https://github.com/magit/ssh-agency/issues/19
  (magit-version)
  (setq ssh-agency-socket-locaters '((ssh-agency-find-socket-from-ss :glob "*ssh*" :regexp #1="/\\(?:agent[.][0-9]+\\|ssh\\)\\'")
                                     (ssh-agency-find-socket-from-netstat :regexp #1#)
                                     (ssh-agency-find-socket-from-glob "/tmp/ssh-*/agent.*")))
  (setq ssh-agency-socket-locaters
        (assq-delete-all 'ssh-agency-find-socket-from-netstat
                         ssh-agency-socket-locaters)))
#+end_src
* git-gutter
:LOGBOOK:
CLOCK: [2021-08-26 Thu 10:55]--[2021-08-26 Thu 11:05] =>  0:10
CLOCK: [2021-08-26 Thu 10:51]--[2021-08-26 Thu 10:54] =>  0:03
CLOCK: [2021-08-26 Thu 10:24]--[2021-08-26 Thu 10:49] =>  0:25
CLOCK: [2021-08-26 Thu 10:07]--[2021-08-26 Thu 10:17] =>  0:10
:END:
#+begin_src emacs-lisp :tangle yes
(use-package git-gutter
    :straight t
    :init
    (global-git-gutter-mode +1)
    :general
    (my-global-leader
	  ;; git-gutter
	  "g g p" 'git-gutter:previous-hunk
	  "g g n" 'git-gutter:next-hunk
	  "g g m" 'git-gutter:mark-hunk
	  "g g s" 'git-gutter:stage-hunk
	  "g g r" 'git-gutter:revert-hunk
	  "g g h p" '(lambda () (interactive) (git-gutter-reset-to-head-parent))
	  "g g h d" '(lambda () (interactive) (git-gutter-reset-to-default))))
#+end_src

Compare current HEAD with its parent.
https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/developer-guide-en.org#git
#+begin_src emacs-lisp :tangle yes
(defun git-gutter-reset-to-head-parent()
  (interactive)
  (let (parent (filename (buffer-file-name)))
    (if (eq git-gutter:vcs-type 'svn)
        (setq parent "PREV")
      (setq parent (if filename (concat (shell-command-to-string (concat "git --no-pager log --oneline -n1 --pretty=\"format:%H\" " filename)) "^") "HEAD^")))
    (git-gutter:set-start-revision parent)
    (message (concat "git-gutter:set-start-revision " parent))))
(defun git-gutter-reset-to-default ()
  (interactive)
  (git-gutter:set-start-revision nil)
  (message "git-gutter reset"))
#+end_src
* git-timemachine
#+begin_src emacs-lisp :tangle yes
(use-package git-timemachine
    :straight t)
#+end_src
* Miscellaneous setup
Stuff that I haven't decided where to put (or never will!).
Mostly consists of system settings.
** vanilla Emacs
:LOGBOOK:
CLOCK: [2020-06-27 Sat 17:10]--[2020-06-27 Sat 17:13] =>  0:03
:END:
#+begin_src emacs-lisp :tangle yes
;; Setting (tool-bar-mode nil) actually enables tool bar when running lisp code.
(tool-bar-mode -1)
(global-display-line-numbers-mode t)
(electric-pair-mode t)

;; 设置垃圾回收，在Windows下，emacs25版本会频繁出发垃圾回收，所以需要设置
;; This solves the problem that affects Emacs' speed while displaying Chinese characters
(when (eq system-type 'windows-nt) (setq gc-cons-threshold (* 512 1024 1024))
      (setq gc-cons-percentage 0.5) (run-with-idle-timer 5 t #'garbage-collect)
      ;; 显示垃圾回收信息，这个可以作为调试用
      ;; (setq garbage-collection-messages t)
      )
;; show-paren-mode
(show-paren-mode 1)
(setq show-paren-style 'mixed)
;; h -> human readable
(setq dired-listing-switches "-alh")


(if (display-graphic-p)
    (progn

      ;; disable sound
      (setq visible-bell 1)

      ;; wrap lines
      (global-visual-line-mode 1)

      ;; save/restore opened files and windows config
      (desktop-save-mode nil)))
#+end_src

** Frame and window
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          Frame and Window          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if (display-graphic-p) 
    (progn
      (set-frame-size (selected-frame) 1350 950 t)
      (defmacro gen-frame-size-func (w-or-h inc)
        "inc/dec-frame-width/height"
        ;; (set-frame-height (selected-frame) (+ (frame-native-height (selected-frame)) 20) nil t)
        ;; use let* so that we can refer to the `inc-or-dec' right away in `let'.
        (let* ((set-func (intern (concat "set-frame-" w-or-h)))
               (get-func (intern (concat "frame-native-" w-or-h)))
               ;; not sure why but it seems 20 is the minimum offset required for the change to take effect
               (value (if (string-equal w-or-h "width") 40 40))
               (inc-or-dec (if inc "inc" "dec"))
               (doc (format "%s the current frame %s." inc-or-dec w-or-h))
               (positive (if inc 1 -1)))

          ;; The comma `,' causes Emacs to evaluate everything in the list it precedes
          ;; so there is no need to place a comma before the variables in the list
          ;; if you want it to be evaluated.
          ;; FIXME: Need to figure out what @ does.
          `(defun ,(intern (concat inc-or-dec "-frame-" w-or-h)) ()
             ,doc
             (interactive)
             (message ,(number-to-string (* positive value)))
             (,set-func (selected-frame) (+ (,get-func (selected-frame)) ,(* positive value)) nil t)
             )
          )
        )

      (gen-frame-size-func "width" t)
      (gen-frame-size-func "width" nil)
      (gen-frame-size-func "height" nil)
      (gen-frame-size-func "height" t)))
#+end_src
** Keyfreq
Keyfreq exclude some commands
#+begin_src emacs-lisp :tangle yes
(use-package keyfreq
  :straight t
  :init
  (setq keyfreq-excluded-commands '(self-insert-command org-self-insert-command
                                                        evil-next-line evil-previous-line evil-forward-word-begin evil-backward-word-begin evil-forward-char
                                                        evil-normal-state
                                                        evil-insert
                                                        ;; backspace in insert mode
                                                        evil-delete-backward-char-and-join
                                                        ;; used in evil-search-word-forward for incremental search
                                                        isearch-printing-char
                                                        evil-next-visual-line
                                                        save-buffer
                                                        evil-previous-visual-line
                                                        evil-forward-word-end
                                                        other-window
                                                        ))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src
** Other
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
;; always turn on hs-minor-mode in any program mode
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src
* org
:LOGBOOK:
CLOCK: [2020-07-17 Fri 21:42]--[2020-07-17 Fri 21:48] =>  0:06
:END:
My org mode setup.
** global
:LOGBOOK:
CLOCK: [2020-07-26 Sun 11:09]--[2020-07-26 Sun 11:10] =>  0:01
CLOCK: [2020-07-26 Sun 11:05]--[2020-07-26 Sun 11:06] =>  0:01
CLOCK: [2020-07-26 Sun 11:05]--[2020-07-26 Sun 11:05] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;             Org-global            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq org-directory (mapconcat 'file-name-as-directory `(,(get-wd) "orgs") ""))
;; include entries from the Emacs diary into Org mode's agenda
(setq org-agenda-include-diary t)
;; turn on indent mode in Org
(add-hook 'org-mode-hook 'org-indent-mode)

;; capture
(setq org-default-notes-file (concat org-directory "inbox.org"))

;; cater for whitespace sensetive languages
(setq org-edit-src-content-indentation 4)
(setq org-src-fontify-natively t)
(setq org-src-preserve-indentation t)

;; et default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
;; set effort estimates
(setq org-global-properties (quote (("Effort_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))

;; org clock in mode line to show only the time
;; passed during the current clock instance.
;; Using auto or all makes it hard for me to track how
;; long I have spent on the current task.
;; This also makes it easier to use the Tomato Timer.
(setq org-clock-mode-line-total 'current)
#+end_src
** agenda
:LOGBOOK:
CLOCK: [2020-05-11 Mon 19:29]--[2020-05-11 Mon 19:31] =>  0:02
CLOCK: [2020-05-05 Tue 10:49]--[2020-05-05 Tue 10:52] =>  0:03
:END:
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;               Agenda              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Agenda
(defun org-agenda-files-paths (cur-wd list)
  "Generate a list of file paths based on `get-wd' for variable `org-agenda-files'"
  (let (new-list)
    (dolist (element list new-list)
      (setq new-list (cons (concat cur-wd element) new-list)))))

(setq org-agenda-files nil)
(setq org-agenda-files (append org-agenda-files (directory-files-recursively (concat org-directory "/brain") ".*org$")))
(setq org-agenda-files (append org-agenda-files (directory-files-recursively (concat org-directory "/knowledge_base") ".*org$")))
(setq org-agenda-files (append org-agenda-files '("~/.emacs.d/yaoni.org")))
(setq org-agenda-files (append org-agenda-files (file-expand-wildcards (concat (mapconcat 'file-name-as-directory `(,(get-wd) "orgs" "leetcode") "") "*.org"))))
;; (setq org-agenda-files (append org-agenda-files (file-expand-wildcards (concat (get-wd) "/brain/Work/QUT/Brownbag/git-tutorial/*.org"))))
#+end_src
** ob-lang
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          ob-lang settings         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enable python source code eval
(require 'ob-python)
;; enable javascript source code eval
(require 'ob-js)
(require 'ob-shell)
(add-to-list 'org-babel-load-languages '(ditaa . t))
(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
#+end_src
** my org setup
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            My org seup            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my-org-setup ()
  "Set up my org settings."
                                        ;(define-key org-mode-map (kbd "C-c t") (kbd "C-u M-x org-time-stamp"))
                                        ;(define-key org-mode-map (kbd "C-c l") 'org-shiftright)
                                        ;(define-key org-mode-map (kbd "C-c h") 'org-shiftleft)
  (defun org-open-org-directory ()
    (interactive)
    (find-file org-directory)
    )
  (yaoni-org-leader-def
    :states 'normal
    :keymaps 'override
    "t" (kbd "C-u M-x org-time-stamp-inactive")
    "l" 'org-shiftright
    "h" 'org-shiftleft
    "o" 'org-open-org-directory
    "c i" 'org-clock-in
    "c o" 'org-clock-out
    "g" 'search-word
    "r i" 'org-roam-node-insert
    "r f" 'org-roam-node-find
    ;; org roam add id
    "r a i" 'org-id-get-create
    "r a t" 'org-roam-tag-add
    "n" 'org-babel-next-src-block
    "p" 'org-babel-previous-src-block
	;; org copy src
	"c s" 'org-copy-src-block
    )
  (require 'ox-md nil t)

  (defun search-word ()
    "Search the word marked or at point."
    (interactive)
    (let (pos1 pos2 bds)
      (if (use-region-p)
          (setq pos1 (region-beginning) pos2 (region-end))
        (progn
          (setq bds (bounds-of-thing-at-point 'symbol))
          (setq pos1 (car bds) pos2 (cdr bds))))
      (shell-command (concat "'/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe' 'https://www.startpage.com/do/dsearch?query='" (replace-regexp-in-string " " "+" (buffer-substring-no-properties pos1 pos2))))))
  ;;(define-key org-mode-map (kbd "C-c g") 'search-word)
  )

(with-eval-after-load "org"
  (my-org-setup))

#+end_src

org mode seems to be not respecting formats with Chinese characters after certain version.
It will not render *bold*, /italic/ or _underscore_.
The fix is from: https://emacs-china.org/t/orgmode/9740/17
#+begin_src elisp :tangle yes
(setq org-emphasis-regexp-components '("-[:multibyte:][:space:]('\"{" "-[:multibyte:][:space:].,:!?;'\")}\\[" "[:space:]" "." 1))
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
(org-element-update-syntax)
#+end_src
Set up time format in clock report.
#+begin_src emacs-lisp :tangle yes
(setq org-duration-format (quote h:mm))
#+end_src

The following allows any #+LAST_MODIFIED headers to be updated on file-save:
(copied from [[https://github.com/skx/dotfiles/blob/master/.emacs.d/init.md#org-mode-timestamping][here]]).
#+begin_src emacs-lisp :tangle yes
(defun yaoni/update-org-modified-property ()
  "If a file contains a '#+LAST_MODIFIED' property update it to contain
  the current date/time"
  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^#\\+LAST_MODIFIED:" (point-max) t)
      (progn
        (kill-line)
        (insert (format-time-string " %d/%m/%Y %H:%M:%S") )))))
#+end_src

Add it to org-mode hook.
#+begin_src emacs-lisp :tangle yes
(defun yaoni-org-mode-before-save-hook ()
  (when (eq major-mode 'org-mode)
    (yaoni/update-org-modified-property)))

(add-hook 'before-save-hook #'yaoni-org-mode-before-save-hook)

#+end_src
** modules
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            org-modules            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; org-bullets
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; do not use any tabs
;; this is added to prevent picture mode from inserting tabs
;; while we are drawing ascii images
;; we do not use tabs anyway so leave it globally on
(setq-default indent-tabs-mode nil)

;; Ditaa settings
;; isable Artist mode in org-src-mode when editing ditaa code
;; his is because Artist mode seems to prevent me from typing arrows (< and >)
(defun setup-ditaa ()
  "Setting up the ditaa env for org-src-mode"
  (message "In ditaa mode %s"(buffer-name))
  (artist-mode-off)
  (picture-mode)
  (display-line-numbers-mode)
  )

(add-hook 'org-src-mode-hook
          (lambda ()
            (if (string-match-p (regexp-quote "ditaa") (buffer-name))
                ;; fixme: need to fix this
                ;; seems to be not calling this function
                (setup-ditaa)
              )))
#+end_src

ox-reveal settings.
This block makes ox-reveal to export images wrapped in ~<figure>~ tag
so that we can later add a ~r-stretch~ class to them for fitting them vertically.
See: https://github.com/yjwen/org-reveal/issues/388
#+begin_src emacs-lisp :tangle yes
(setq org-html-html5-fancy t
      org-html-doctype "html5")
#+end_src


ox-latex settings.
#+begin_src emacs-lisp :tangle yes
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-latex-minted-options
'(("frame" "lines")  ("linenos" "") ("style" "friendly")))
#+end_src
** org-tree-slide
Org-tree-slide for presentation.
#+begin_src emacs-lisp :tangle yes
(require 'org-tree-slide)
#+end_src
** org-id
#+begin_src emacs-lisp :tangle yes
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
#+end_src
** org-download
Configuration from [[https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/][here]].

Need to install [[https://github.com/jcsalterego/pngpaste][pngpaste]] too.
#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :straight t
  :after org
  :defer nil
  :custom
  (org-download-method 'directory)
  ;; Can only use jpeg. png files will have a greyed out/washed effect on the image.
  ;; see: https://github.com/jcsalterego/pngpaste/issues/16
  (org-download-screenshot-basename "screenshot.jpeg")
  (org-download-image-dir "images")
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  (org-image-actual-width 1000)
  (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
  :bind
  ("C-M-y" . org-download-screenshot)
  :config
  (require 'org-download))
#+end_src
** custom functions
Copy the content in the current source block to the kill-ring.
#+begin_src emacs-lisp :tangle yes
(defun org-copy-src-block ()
  (interactive)
  (org-edit-src-code)
  (mark-whole-buffer)
  (kill-ring-save nil nil t)
  (org-edit-src-abort))
#+end_src

* org-roam
:LOGBOOK:
CLOCK: [2022-01-25 Tue 15:28]--[2022-01-25 Tue 15:37] =>  0:09
CLOCK: [2021-10-30 Sat 21:47]--[2021-10-30 Sat 22:21] =>  0:34
CLOCK: [2021-09-03 Fri 22:14]--[2021-09-03 Fri 22:14] =>  0:00
CLOCK: [2021-09-03 Fri 21:58]--[2021-09-03 Fri 22:14] =>  0:16
CLOCK: [2021-01-13 Wed 08:44]--[2021-01-13 Wed 10:08] =>  1:24
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :straight t
  :hook
  (after-init . org-roam-mode)
  ;; using custom here seems to be not working.
  ;; we need to set the vars first then run the hook above
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-server-mode t)
  (setq org-roam-directory org-directory)
  (setq org-roam-tag-sources
		'(prop all-directories))
  (setq org-roam-capture-templates
		`(("d" "default" plain "%?"
		   :if-new
		   (file+head "%<%Y-%m-%d-%H%M%S>-${slug}.org"
					  "#+title: ${title}\n\n#+begin_export html\n---\nlayout: post\ntitle: \"${title}\"\nexcerpt:\n---\n#+end_export")
		   :unnarrowed t)
		  ("l" "leetcode" plain "%?"
		   :if-new
		   (file+head ,(concat (file-name-as-directory org-roam-directory) "leetcode/%<%Y-%m-%d-%H%M%S>-${slug}.org")
					  "#+title: ${title}\n\n#+begin_export html\n---\nlayout: post\ntitle: \"${title}\"\nexcerpt:\n---\n#+end_export")
		   :unnarrowed t)
		  ("e" "encrypted-note" plain "%?"
           :if-new
		   (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg"
					  "#+title: ${title}\n")
		   :unnarrowed t)))
  (setq org-roam-dailies-capture-templates
		`(("d" "encrypted-daily" plain "%?"
           :if-new
		   (file+head "%<%Y-%m-%d>.org.gpg"
					  "#+title: %<%Y-%m-%d>\n"))))
  (setq org-roam-file-exclude-regexp ".*.org.gpg")
  :config
  ;; function to update all org roam file ids. see: https://org-roam.discourse.group/t/org-roam-v2-org-id-id-link-resolution-problem/1491
  ;; Otherwise export won't work and you can't jump between files using `C-c C-o'.
  (org-id-update-id-locations
   (org-roam-list-files)))
#+end_src
** TODO [[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]
:PROPERTIES:
:ID:       73fc703f-0d6d-47bf-bfe7-5d03c90c49e0
:END:
** org-roam-ui
:LOGBOOK:
CLOCK: [2021-08-19 Thu 20:10]--[2021-08-19 Thu 20:22] =>  0:12
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
* latex
:LOGBOOK:
CLOCK: [2022-01-26 Wed 20:42]--[2022-01-26 Wed 20:54] =>  0:12
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-latex-impatient
  :straight t
  :defer t
  :hook (org-mode . org-latex-impatient-mode)
  :init
  (setq org-latex-impatient-tex2svg-bin
        ;; location of tex2svg executable
        "~/node_modules/mathjax-node-cli/bin/tex2svg"))
#+end_src
* pyim

#+begin_src emacs-lisp :tangle yes
;; pyim
(require 'posframe)
(require 'pyim)
(require 'pyim-basedict)
(pyim-basedict-enable)
(setq default-input-method "pyim")
(setq pyim-default-scheme 'quanpin)
(setq pyim-fuzzy-pinyin-alist '())
(require 'pyim-wbdict)
(pyim-wbdict-v98-enable)
(global-set-key (kbd "C-\\") 'toggle-input-method)
;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
;; 手动安装 posframe 包。
(setq pyim-page-tooltip 'posframe)
;; (设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
;; 我自己使用的中英文动态切换规则是：
;; 1. 光标只有在注释里面时，才可以输入中文。
;; 2. 光标前是汉字字符时，才能输入中文。
;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
(setq-default pyim-english-input-switch-functions
              '(pyim-probe-dynamic-english
                pyim-probe-isearch-mode
                pyim-probe-program-mode
                pyim-probe-org-structure-template))
(setq pyim-punctuation-translate-p '(auto yes no))   ; 文使用全角标点，英文使用半角标点。
(setq-default pyim-punctuation-half-width-functions
              '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
(global-set-key (kbd"M-j") 'pyim-convert-string-at-point) ;  pyim-probe-dynamic-english 配合
(global-set-key (kbd"C-;") 'pyim-delete-word-from-personal-buffer)

;; https://emacs-china.org/t/topic/6069/30?u=tumashu
;; 添加ivy中文搜索
(defun eh-ivy-cregexp (str)
  ;; https://github.com/abo-abo/swiper/issues/294#issuecomment-157871131
  (let ((x (ivy--regex-fuzzy str))
        (case-fold-search nil))
    (if (listp x)
        (mapcar (lambda (y)
                  (if (cdr y)
                      (list (if (equal (car y) "")
                                ""
                              (pyim-cregexp-build (car y)))
                            (cdr y))
                    (list (pyim-cregexp-build (car y)))))
                x)
      (pyim-cregexp-build x))))
(setq ivy-re-builders-alist
        '((t . eh-ivy-cregexp)))
#+end_src
* ivy
Config based on: https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :straight t
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :straight t
  :defer 0.1
  :diminish
  :bind (("C-c C-r" . ivy-resume)
         ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  :config
  (ivy-mode)
  (define-key ivy-minibuffer-map (kbd "<C-return>") 'ivy-immediate-done))

(use-package ivy-rich
  :straight t
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config
  (ivy-rich-mode))

(use-package swiper
  :straight t
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src
* Testing
** ejc-sql
:LOGBOOK:
CLOCK: [2021-03-11 Thu 11:44]--[2021-03-11 Thu 14:24] =>  2:40
:END:
#+begin_src emacs-lisp :tangle no
(require 'ejc-sql)
#+end_src
** sqlformat
#+begin_src emacs-lisp :tangle yes
(setq sqlformat-args '("-r" "-s" "--comma_first" "TRUE" "--indent_width" "4" "--k" "upper"))
(setq sqlformat-command 'sqlformat)
#+end_src
** org agenda view customisation
:LOGBOOK:
CLOCK: [2021-01-16 Sat 07:50]--[2021-01-16 Sat 07:56] =>  0:06
CLOCK: [2021-01-15 Fri 22:03]--[2021-01-15 Fri 22:18] =>  0:15
CLOCK: [2021-01-15 Fri 18:49]--[2021-01-15 Fri 19:49] =>  1:00
CLOCK: [2021-01-15 Fri 18:36]--[2021-01-15 Fri 18:41] =>  0:05
CLOCK: [2021-01-14 Thu 20:27]--[2021-01-14 Thu 20:33] =>  0:06
:END:
[[https://github.com/jethrokuan/.emacs.d/blob/master/init.el][github repo]]
See also [[https://orgmode.org/worg/doc.html][Documentation for Org hooks, commands and options]]
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s%-6:c% e")
                                 (todo . " %i %-12:c% b")
                                 (tags . " %i %-12:c% b")
                                 (search . " %i %-12:c")))
(setq org-agenda-block-separator nil)
(setq org-agenda-start-with-log-mode t)
(setq yaoni/org-agenda-todo-view
      `("y" "Agenda"
        ((agenda ""
                 ((org-agenda-span 'day)
                  (org-deadline-warning-days 365)
                  (org-agenda-sorting-strategy '(time-up))))
         (todo "TODO"
               ((org-agenda-overriding-header "To Refile")
                (org-agenda-files '(,org-default-notes-file))))
         
         ;; (todo "TODO"
         ;;       ((org-agenda-overriding-header "Emails")
         ;;        (org-agenda-files '(,(concat jethro/org-agenda-directory "emails.org")))))
         (todo "NEXT"
               ((org-agenda-overriding-header "In Progress")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "^[^\.].*\.org$"))
                ))
         ;; don't show HOLD and DONE
         (tags-todo "+@qut-TODO=\"HOLD\"-TODO=\"DONE\""
                    ((org-agenda-overriding-header "QUT")
                     ;; "^[^\.].*\.org$" ignores Emacs backup files.
                     (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "QUT.org$"))
                     ))
         (tags-todo "@customology"
               ((org-agenda-overriding-header "Customology")
                ;; "^[^\.].*\.org$" ignores Emacs backup files.
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "Customology.org$"))
                ))
         (todo "TODO"
               ((org-agenda-overriding-header "Company")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "Easytex.org$"))
                ))
         (tags-todo "once"
               ((org-agenda-overriding-header "One-off Tasks")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "^[^\.].*\.org$"))
                ))
         (tags-todo "repeater"
               ((org-agenda-overriding-header "Repeaters")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "^[^\.].*\.org$"))
                ))
         (todo "TODO"
               ((org-agenda-overriding-header "Personal")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "Personal.org$"))
                ))
         nil)
        ((org-agenda-sorting-strategy '(priority-down todo-state-up alpha-up)))))
(setq org-agenda-custom-commands ())
(add-to-list 'org-agenda-custom-commands `,yaoni/org-agenda-todo-view)
#+end_src

*** DONE set number of spaces between item and tags in org-agenda-view
SCHEDULED: <2021-01-14 Thu>
:PROPERTIES:
:ID:       8d883d08-421c-4f7a-b9e2-49ed78ae2f42
:END:
:LOGBOOK:
CLOCK: [2021-01-14 Thu 10:22]--[2021-01-14 Thu 10:45] =>  0:23
:END:
#+begin_src emacs-lisp :tangle yes
;; left align tags in org-agenda view
(setq org-agenda-tags-column 0)
#+end_src
** org tags
[[https://orgmode.org/manual/Setting-Tags.html][Setting Tags (The Org Manual)]]
#+begin_src emacs-lisp :tangle yes
(setq org-tag-alist (quote (("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            ("@qut" . ?q)
                            ("@customology" . ?c)
                            (:newline)
                            ("WAITING" . ?w)
                            ("HOLD" . ?H)
                            ("CANCELLED" . ?C)
                            (:newline)
                            ("repeater" . ?r)
                            ("once" . ?O))))
#+end_src
** org todo keywords
#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
#+end_src
** org gcal
:LOGBOOK:
CLOCK: [2021-01-14 Thu 21:46]--[2021-01-14 Thu 22:17] =>  0:31
:END:
** autosave all org buffers after clocking in org agenda view
:LOGBOOK:
CLOCK: [2021-01-15 Fri 22:23]--[2021-01-15 Fri 22:24] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
(advice-add 'org-agenda-clock-in :after 'org-save-all-org-buffers)
(advice-add 'org-agenda-clock-out :after 'org-save-all-org-buffers)
#+end_src
** casease
:LOGBOOK:
CLOCK: [2022-01-20 Thu 15:00]--[2022-01-20 Thu 15:21] =>  0:21
CLOCK: [2022-01-20 Thu 14:02]--[2022-01-20 Thu 14:09] =>  0:07
CLOCK: [2022-01-20 Thu 09:23]--[2022-01-20 Thu 09:41] =>  0:18
CLOCK: [2021-02-21 Sun 22:07]--[2021-02-21 Sun 22:08] =>  0:01
CLOCK: [2021-02-21 Sun 21:51]--[2021-02-21 Sun 22:05] =>  0:14
:END:
#+begin_src emacs-lisp :tangle yes
(use-package casease
  :straight (:host github :repo "DogLooksGood/casease" :branch "master" :files ("*.el" "out"))
  :config (casease-setup
           :hook python-mode-hook
           ;; use comma to input underscore
           ;; as it's not used in python variables
           :separator ?-
           :entries
           ;; ugh spent so much time on this because I didn't notice I used the wrong
           ;; regex [a-z][0-9], which means alphabet followed by number
           ((snake "[a-z0-9]"))))
;;; hook will be setup, re-run after changing rules or separator
#+end_src
** exec-path-from-shell
#+begin_src elisp :tangle yes
(exec-path-from-shell-initialize)
;; so that I get passwords from my env to be used for my work
(exec-path-from-shell-copy-env "CMG_DB_PWD")
#+end_src
** org-jekyll
:LOGBOOK:
CLOCK: [2022-01-23 Sun 20:03]--[2022-01-23 Sun 20:18] =>  0:15
CLOCK: [2022-01-05 Wed 21:15]--[2022-01-05 Wed 21:15] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-publish-project-alist
      `(("yatsky.github.io"
         ;; Path to org files.
         :base-directory ,(concat (file-name-as-directory (get-wd)) "orgs")
         :base-extension "org"
         ;; :base-extension "gpg"
         ;; Path to Jekyll Posts
         :publishing-directory ,(concat (file-name-as-directory (get-wd)) "yatsky.github.io/_posts")
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :html-extension "html"
         :body-only t
         :html-head nil
         :html-head-include-default-style nil
         :with-toc nil ;; ignore toc as it'll break jekyll front matter
         :exclude "Customology.org"
         ;; only include files with tag blog
         :include-file-tags "blog"
         )

        ("images"
         :base-directory ,(concat (file-name-as-directory (get-wd)) "orgs/images")
         :base-extension "png\\|jpg\\|gif\\|jpeg"
         :publishing-directory ,(concat (file-name-as-directory (get-wd)) "yatsky.github.io/assets/images")
         :publishing-function org-publish-attachment
         )

        ("blog" :components (
                             "yatsky.github.io"
                             "images"
                             ))))
(setq org-export-with-broken-links 'mark)
#+end_src
* Programming aids
** Yasnippet
:LOGBOOK:
CLOCK: [2022-01-20 Thu 11:44]--[2022-01-20 Thu 11:48] =>  0:04
:END:
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :straight t
  :config
  (yas-global-mode 1)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+end_src
** Flycheck
:LOGBOOK:
CLOCK: [2022-01-20 Thu 11:58]--[2022-01-20 Thu 12:00] =>  0:02
CLOCK: [2022-01-20 Thu 10:11]--[2022-01-20 Thu 10:32] =>  0:21
:END:
Virtual env support seems to be out of the box.
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :straight t
  :init (global-flycheck-mode))
#+end_src
** Jedi
#+begin_src emacs-lisp :tangle yes
;; jedi
; (add-hook 'python-mode-hook 'jedi:setup)
; (setq jedi:complete-on-dot t)    ; ptional
; (setq ac-max-width 0.4)
#+end_src
#+end_src
** Blacken
#+begin_src emacs-lisp :tangle yes
(use-package blacken
  :config
  (setq blacken-skip-string-normalization t))
#+end_src
** Typescript
#+begin_src emacs-lisp :tangle no
;; tide for TypeScript
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1)

  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)
  )

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src
** Web-mode
#+begin_src emacs-lisp :tangle yes

(require 'web-mode)
(setq web-mode-engines-alist
      '(("django"  . "\\.html\\'"))
      )
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))

(defun my-web-mode-hook ()
  (when (string-equal "tsx" (file-name-extension buffer-file-name))
    (setup-tide-mode))
  (message "Web-mode on")
  (electric-pair-local-mode -1)
  )
(add-hook 'web-mode-hook 'my-web-mode-hook)

#+end_src
** Format code and save-buffer
:LOGBOOK:
CLOCK: [2020-03-25 Wed 17:46]--[2020-03-25 Wed 18:11] =>  0:25
:END:
Before saving buffer, we want to format any code in it if an appropriate formatter is installed.
*** Features
**** Format code before saving buffer
This is the original idea.
**** [2020-03-26 Thu 09:24] To save some time, only scan and format edited sections
*Edited section* refers to a heading whose direct children have been modified.
When in org mode, we save the modified headings in a +temporary buffer+ variable, then before saving the buffer, we use this information to let the ~format-code-before-save-buffer~ function know where to format.
*** Code
:LOGBOOK:
CLOCK: [2022-01-20 Thu 10:33]--[2022-01-20 Thu 10:45] =>  0:12
CLOCK: [2020-03-26 Thu 15:16]--[2020-03-26 Thu 15:16] =>  0:00
CLOCK: [2020-03-26 Thu 14:22]--[2020-03-26 Thu 14:26] =>  0:04
CLOCK: [2020-03-26 Thu 14:06]--[2020-03-26 Thu 14:22] =>  0:16
CLOCK: [2020-03-26 Thu 14:01]--[2020-03-26 Thu 14:01] =>  0:00
CLOCK: [2020-03-26 Thu 13:55]--[2020-03-26 Thu 14:01] =>  0:06
CLOCK: [2020-03-26 Thu 10:53]--[2020-03-26 Thu 12:10] =>  1:17
CLOCK: [2020-03-26 Thu 09:25]--[2020-03-26 Thu 10:32] =>  1:07
:END:
#+begin_src emacs-lisp :tangle yes
(defun store-org-edited-headings ()
  "Store edited org headings in current buffer."
  ;; Add (org-get-heading) in case we modify text before all headings
  ;; which will make (org-heading-components) throw an exception.
  (if (and (eq major-mode 'org-mode) (org-get-heading))
      (let ((heading (nth 4 (org-heading-components))))
        (if (member heading yaoni-org-edited-headings)
            (message "Already in edited headings")
          (setq-local yaoni-org-edited-headings
                      (push heading yaoni-org-edited-headings))
          ))))


(defun yaoni-format-code-org-setup ()
  "Setup to be run in org-mode-hook."
  (setq-local yaoni-org-edited-headings ())
  ;; store the heading everytime there's a change
  (add-hook 'evil-insert-state-exit-hook 'store-org-edited-headings)
  )

(add-hook 'org-mode-hook 'yaoni-format-code-org-setup)

;; Format code here
(defun yaoni-org-format-code-under-heading (heading)
  "Format code under HEADING in org buffer."
  (save-excursion
    ;; Quick error handling
    (condition-case nil
        (progn
          (forward-line)
          (search-backward heading)
          (org-mark-subtree)
          (indent-region (region-beginning) (region-end)))
      (error nil)
      )
    )
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun format-code-before-save-buffer ()
  "Format code and then save buffer."
  (interactive)
  (cond ((eq major-mode 'org-mode)
         ;; (mapc 'yaoni-org-format-code-under-heading yaoni-org-edited-headings)
         (setq-local yaoni-org-edited-headings (list)))
        ((eq major-mode 'python-mode) (let ((saved-position (point)))
                                        (blacken-buffer)
                                        (goto-char saved-position)))))
(add-hook 'before-save-hook #'format-code-before-save-buffer)
#+end_src
** Project-Org entry jump
:LOGBOOK:
CLOCK: [2020-03-25 Wed 20:39]--[2020-03-25 Wed 21:01] =>  0:22
:END:
用 Emacs 写代码的时候总是会经常需要在工程文件夹和对应的 org 文件之间来回切换​。之前一直用的都是最古老的 `switch-buffer` 命令，每次都需要手动在一个列表里面找到需要跳转的 buffer，于是想到把这步省去，能够快速的跳转到当前 buffer 对应的工程或是 org​ buffer。

#+BEGIN_SRC ditaa :file project-org-jump.png :cmdline -r -s 2
+-----------------+           +-----------------+
|                 |           |                 |
|                 |  jump to  |                 |
|  org buffer     |---------->|  project        |
|                 |  jump back|  directory      |
|                 |<----------|                 |
|                 |           |                 |
|                 |           |                 |
+-----------------+           +-----------------+
#+END_SRC

#+RESULTS:
[[file:project-org-jump.png]]

最基本的想法就是，在工程目录下放一个 org-entry，里面记录对应的 org 文件的名称（我的 org 文件都在同一目录下，所以只需要名称即可）。
在 org 文件中对应的 entry 下面加上一个 LOCATION 属性，用来记录对应的工程路径。
这样设置好后，可以用下面的代码实现快速跳转。
*** Open project from entry location
#+begin_src emacs-lisp :tangle yes
(defun open-project-from-entry-location ()
  "Open project, at LOCATION property in org, in Dired."
  (interactive)
  ;; let is a special form that does not need the single quote
  (let ((file-location (org-entry-get (point) "LOCATION" t)))
    (if file-location
        (find-file file-location)
      ;; else
      (message "File location is not present."))))
#+end_src
*** Open project org file from project
#+begin_src emacs-lisp :tangle yes
(defun open-org-file-from-project ()
  "Open project-related org file from project."
  (interactive)
  (let ((file-location (concat org-directory (file-name-as-directory 
                                              (with-temp-buffer
                                                (insert-file-contents
                                                 (concat
                                                  (locate-dominating-file default-directory "org-entry")
                                                  "/org-entry"))
                                                (buffer-string)))))
        (if (file-exists-p file-location)
            (find-file file-location)
          ;; else
          (message "org-entry is not present.")
          ))))
#+end_src
*** Keymap
#+begin_src emacs-lisp :tangle yes
(defun org-project-jump ()
  "A wrapper function to jump between a project and its org file.
`open-project-from-entry-location' and `open-org-file-from-project'.
"
  (interactive)
  (if (eq major-mode 'org-mode)
      (open-project-from-entry-location)
    (open-org-file-from-project)))
;; 快捷键设置，我用的是 general.el
(yaoni-org-leader-def
  :states 'normal
  :keymaps 'override
  "j" 'org-project-jump
  )
#+end_src
*** Demo
[[file:./project-org-jump-demo.gif]]
** copy lines matching regex
:LOGBOOK:
CLOCK: [2021-12-05 Sun 15:22]--[2021-12-05 Sun 15:34] =>  0:12
:END:
https://stackoverflow.com/questions/2289883/emacs-copy-matching-lines
#+begin_src elisp :tangle yes
(defun copy-lines-matching-re (re)
  "find all lines matching the regexp RE in the current buffer
putting the matching lines in a buffer named *matching*"
  (interactive "sRegexp to match: ")
  (let ((result-buffer (get-buffer-create "*matching*")))
    (with-current-buffer result-buffer 
      (erase-buffer))
    (save-match-data 
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (princ (buffer-substring-no-properties (line-beginning-position) 
                                                 (line-beginning-position 2))
                 result-buffer))))
    (pop-to-buffer result-buffer)))
#+end_src
** lsp-mode
:LOGBOOK:
CLOCK: [2021-05-08 Sat 15:58]--[2021-05-08 Sat 16:39] =>  0:41
CLOCK: [2021-05-08 Sat 15:37]--[2021-05-08 Sat 15:58] =>  0:21
:END:
#+begin_src emacs-lisp :tangle no
(use-package lsp-mode
  :straight t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (nxml-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui
  :straight t
  :commands lsp-ui-mode)
#+end_src
** Clover
:LOGBOOK:
CLOCK: [2022-02-04 Fri 20:07]--[2022-02-04 Fri 20:09] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
(use-package ctl-mode
  :straight (:host github :repo "yatsky/ctl-mode" :branch "master" :files ("*.el" "out")))
#+end_src
** uuid generator
#+begin_src elisp :tangle yes
;; see: https://emacs.stackexchange.com/questions/24470/warning-yasnippet-modified-buffer-in-a-backquote-expression
;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
(defun insert-random-uuid ()
  "Insert a UUID.
This commands calls “uuidgen” on MacOS, Linux, and calls PowelShell on Microsoft Windows.
URL `http://ergoemacs.org/emacs/elisp_generate_uuid.html'
Version 2020-06-04"
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (shell-command "pwsh.exe -Command [guid]::NewGuid().toString()" t))
   ((string-equal system-type "darwin") ; Mac
    (shell-command "uuidgen" t))
   ((string-equal system-type "gnu/linux")
    (shell-command "uuidgen" t))
   (t
    ;; code here by Christopher Wellons, 2011-11-18.
    ;; and editted Hideki Saito further to generate all valid variants for "N" in xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx format.
    (let ((myStr (md5 (format "%s%s%s%s%s%s%s%s%s%s"
                              (user-uid)
                              (emacs-pid)
                              (system-name)
                              (user-full-name)
                              (current-time)
                              (emacs-uptime)
                              (garbage-collect)
                              (buffer-string)
                              (random)
                              (recent-keys)))))
      (insert (format "%s-%s-4%s-%s%s-%s"
                      (substring myStr 0 8)
                      (substring myStr 8 12)
                      (substring myStr 13 16)
                      (format "%x" (+ 8 (random 4)))
                      (substring myStr 17 20)
                      (substring myStr 20 32)))))))
#+end_src
** wucuo
:LOGBOOK:
CLOCK: [2022-01-25 Tue 16:29]--[2022-01-25 Tue 16:33] =>  0:04
CLOCK: [2022-01-25 Tue 15:40]--[2022-01-25 Tue 15:55] =>  0:15
CLOCK: [2022-01-20 Thu 15:34]--[2022-01-20 Thu 15:34] =>  0:00
CLOCK: [2022-01-20 Thu 13:43]--[2022-01-20 Thu 14:00] =>  0:17
:END:
First install Aspell with Homebrew.
#+begin_src emacs-lisp :tangle yes
(defun yaoni/wucuo-maybe-start()
  "Check the size of the buffer to see if we should start wucuo."
  (if (< (buffer-size) 100000)
      (wucuo-start)
    (wucuo-stop)))
(use-package wucuo
  :straight t
  :init
  (add-hook 'prog-mode-hook #'yaoni/wucuo-maybe-start)
  (add-hook 'text-mode-hook #'yaoni/wucuo-maybe-start)
  (setq ispell-program-name "aspell")
  ;; You could add extra option "--camel-case" for camel case code spell checking if Aspell 0.60.8+ is installed
  ;; @see https://github.com/redguardtoo/emacs.d/issues/796
  (setq ispell-extra-args `("--sug-mode=ultra"
                            "--lang=en_US"
                            "--run-together"
                            "--run-together-limit=16"
                            ,(if (string-match "6.\.[89]" (shell-command-to-string "aspell --versioin")) "--camel-case" "")))
  (my-global-leader
    "wc" 'wucuo-spell-check-visible-region))
#+end_src
** lisp
:LOGBOOK:
CLOCK: [2022-01-26 Wed 12:45]--[2022-01-26 Wed 13:05] =>  0:20
CLOCK: [2022-01-25 Tue 19:57]--[2022-01-25 Tue 20:09] =>  0:12
CLOCK: [2022-01-25 Tue 17:03]--[2022-01-25 Tue 17:03] =>  0:00
CLOCK: [2022-01-25 Tue 16:50]--[2022-01-25 Tue 16:55] =>  0:05
CLOCK: [2022-01-25 Tue 16:35]--[2022-01-25 Tue 16:50] =>  0:15
:END:
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :straight t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** quote lines
#+begin_src emacs-lisp :tangle yes
(defun xah-get-bounds-of-block-or-region ()
  "If region is active, return its boundary, else same as `xah-get-bounds-of-block'.
Version: 2021-08-12"
  (if (region-active-p)
      (cons (region-beginning) (region-end))
    (xah-get-bounds-of-block)))
(defun xah-quote-lines (@quoteL @quoteR @sep )
  "Add quotes/brackets and separator (comma) to lines.
Act on current block or selection.

For example,

 cat
 dog
 cow

becomes

 \"cat\",
 \"dog\",
 \"cow\",

or

 (cat)
 (dog)
 (cow)

In lisp code, @quoteL @quoteR @sep are strings.

URL `http://xahlee.info/emacs/emacs/emacs_quote_lines.html'
Version 2020-06-26 2021-07-21 2021-08-15"
  (interactive
   (let (($brackets
          '(
            "\"double\""
            "'single'"
            "(paren)"
            "{brace}"
            "[square]"
            "<greater>"
            "`emacs'"
            "`markdown`"
            "~tilde~"
            "=equal="
            "“curly double”"
            "‘curly single’"
            "‹french angle›"
            "«french double angle»"
            "「corner」"
            "none"
            "other"
            )) $bktChoice $sep $sepChoice $quoteL $quoteR)
     (setq $bktChoice (ido-completing-read "Quote to use:" $brackets ))
     (setq $sepChoice (ido-completing-read "line separator:" '(  "," ";" "none" "other")))
     (cond
      ((string-equal $bktChoice "none")
       (setq $quoteL "" $quoteR "" ))
      ((string-equal $bktChoice "other")
       (let (($x (read-string "Enter 2 chars, for begin/end quote:" )))
         (setq $quoteL (substring-no-properties $x 0 1)
               $quoteR (substring-no-properties $x 1 2))))
      (t (setq $quoteL (substring-no-properties $bktChoice 0 1)
               $quoteR (substring-no-properties $bktChoice -1))))
     (setq $sep
           (cond
            ((string-equal $sepChoice "none") "")
            ((string-equal $sepChoice "other") (read-string "Enter separator:" ))
            (t $sepChoice)))
     (list $quoteL $quoteR $sep)))
  (let ( $p1 $p2 ($quoteL @quoteL) ($quoteR @quoteR) ($sep @sep))
    (let (($bds (xah-get-bounds-of-block-or-region))) (setq $p1 (car $bds) $p2 (cdr $bds)))
    (save-excursion
      (save-restriction
        (narrow-to-region $p1 $p2)
        (goto-char (point-min))
        (catch 'EndReached
          (while t
            (skip-chars-forward "\t ")
            (insert $quoteL)
            (end-of-line )
            (insert $quoteR $sep)
            (if (eq (point) (point-max))
                (throw 'EndReached t)
              (forward-char))))))))
#+end_src
* Use-package
:LOGBOOK:
CLOCK: [2021-01-27 Wed 21:15]--[2021-01-27 Wed 21:31] =>  0:16
CLOCK: [2021-01-27 Wed 21:04]--[2021-01-27 Wed 21:13] =>  0:09
CLOCK: [2021-01-27 Wed 21:02]--[2021-01-27 Wed 21:04] =>  0:02
:END:
* Which-key
#+begin_src elisp :tangle yes
(use-package which-key
  :config
  (which-key-mode))
#+end_src
* yaml-mode
#+begin_src elisp :tangle yes
(use-package yaml-mode
  :straight t
  :config
  ;; yaml support
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
* Tag navigation
** evil-matchit
Easily jumping between beginning and ending tags.
https://github.com/redguardtoo/evil-matchit
#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :straight t
  :config
;; (require 'evil-matchit)
  (global-evil-matchit-mode 1)
)
(yaoni-tag-leader-def
  :states '(motion normal)
  :keymaps 'override
  "j" 'evilmi-jump-items
)
#+end_src
** nxml
See: https://lgfang.github.io/mynotes/emacs/emacs-xml.html#sec-8-1 or [[file:../Dev/orgs/20210501214605-xml_on_emacs.org][XML on Emacs]].
#+begin_src emacs-lisp :tangle yes
(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>" ;; regexp for start block
               "-->\\|</[^/>]*[^/]>" ;; regexp for end block
               "<!--"
               nxml-forward-element
               nil))
;; we want to insert tabs for CTL in Clover graphs
(add-hook 'nxml-mode-hook
    (lambda ()
        (setq-default indent-tabs-mode t)
        (setq-default tab-width 4)
		(hs-minor-mode 1)))
#+end_src
* org-plus-contrib
See [[https://github.com/raxod502/straight.el/issues/753][issue]] and [[https://github.com/raxod502/straight.el/commit/9eb2e058665ad1144c66d2b1b816f9effa37907e][commit]].
#+begin_src emacs-lisp :tangle yes
(use-package org-contrib
  :straight t)
#+end_src
* Updates
:LOGBOOK:
CLOCK: [2022-01-26 Wed 17:27]--[2022-01-26 Wed 17:27] =>  0:00
:END:
** DONE Cleaning up
:LOGBOOK:
CLOCK: [2022-01-26 Wed 17:27]--[2022-01-26 Wed 17:34] =>  0:07
CLOCK: [2020-05-24 Sun 15:25]--[2020-05-24 Sun 15:26] =>  0:01
CLOCK: [2020-05-24 Sun 15:20]--[2020-05-24 Sun 15:24] =>  0:04
CLOCK: [2020-04-29 Wed 09:30]--[2020-04-29 Wed 09:39] =>  0:09
CLOCK: [2020-04-29 Wed 09:02]--[2020-04-29 Wed 09:11] =>  0:09
:END:

* Aesthetics
#+begin_src emacs-lisp :tangle no
(use-package storybook-theme
    :quelpa (storybook-theme :fetcher github :repo "yatsky/storybook-theme")
    :init
    (require 'storybook-theme))
#+end_src
#+begin_src emacs-lisp :tangle yes
(load-theme 'dracula t)
(require 'powerline)
;; (powerline-center-evil-theme)
(if (display-graphic-p)
    (progn
      ;; Set cursor color
      (set-cursor-color "white")

      ;; Set mouse color
      (set-mouse-color "white")

      (global-emojify-mode t)
      (global-emojify-mode-line-mode t)))
#+end_src
** Mode line
Mode line customization.
#+begin_src emacs-lisp :tangle yes
;; see: https://emacs.stackexchange.com/questions/3925/hide-list-of-minor-modes-in-mode-line
(defvar hidden-minor-modes ; example, write your own list of hidden
  '(abbrev-mode            ; minor modes
    org-indent-mode
    yas-minor-mode
    evil-org-mode
    eldoc-mode
    undo-tree-mode
    which-key-mode
    visual-line-mode
    auto-revert-mode))

(defun purge-minor-modes ()
  (interactive)
  (dolist (x hidden-minor-modes nil)
    (let ((trg (cdr (assoc x minor-mode-alist))))
      (when trg
        (setcar trg "")))))

(add-hook 'after-change-major-mode-hook 'purge-minor-modes)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq display-time-format "%a %d/%m")
(setq display-time-default-load-average nil)
#+end_src
#+begin_src emacs-lisp :tangle yes
(setq projectile-mode-line-prefix " Prj")
#+end_src

** Other
#+begin_src emacs-lisp :tangle yes

(global-undo-tree-mode)


(setq gif-screencast-output-directory (concat org-directory "screencasts"))




(pdf-tools-install)

;; Projectile
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;; Dired
(require 'dired-x)
(setq-default dired-omit-files-p t);; uffer-local variable
(setq dired-omit-files (concat dired-omit-files "|.+~$"))

;; virtualenvwrapper
(require 'virtualenvwrapper)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
;; note that setting `venv-location` is not necessary if you
;; use the default location (`~/.virtualenvs`), or if the
;; the environment variable `WORKON_HOME` points to the right place
(venv-workon "data")

(defun open-working-directory ()
  (interactive)
  (find-file (get-wd))
  )

(defun open-workspace (&optional ver)
  (interactive)
  (find-file (get-workspace ver))
)

(yaoni-org-leader-def
  :states '(motion normal)
  :keymaps 'override

  "d" 'open-working-directory
  "w" 'open-workspace
  "5" (lambda() (interactive) (open-workspace 5))
)

#+end_src

All the icons to display and show icons.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons)
#+end_src
