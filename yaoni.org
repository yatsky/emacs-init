* Introduction
This is my personal Emacs init file in org.
* Basic config
:LOGBOOK:
CLOCK: [2022-01-26 Wed 17:05]--[2022-01-26 Wed 17:15] =>  0:10
:END:
** exec-path-from-shell
#+begin_src elisp :tangle yes
(use-package exec-path-from-shell
  :straight t)
(exec-path-from-shell-initialize)
;; so that I get passwords from my env to be used for my work
(exec-path-from-shell-copy-env "CMG_DB_PWD")
(exec-path-from-shell-copy-env "DEV_DIR")
#+end_src
** Some very basic config of my own.
This was called "utils" before being compiled into this file.
#+begin_src emacs-lisp :tangle yes
(use-package s
  :straight  (:host github :repo "magnars/s.el" :files ("*.el" "out"))
  :ensure t)

(defun is-gnu-linux ()
  "Return true is the current os is gnu/linux"
  (string-equal system-type "gnu/linux"))

(defun get-wd ()
  "Get my working directory"
  (getenv "DEV_DIR"))

(defun get-workspace(&optional ver)
  "Get Workspace. If `ver' is set then it's that Clover version's workspace."
  (let ((prefix (mapconcat 'file-name-as-directory `(,(expand-file-name "~") "Documents" "workspace") "")))
    (if ver
        (replace-regexp-in-string "workspace" (concat "workspace" "_" (number-to-string ver)) prefix)
      prefix)))

(setq initial-buffer-choice
      ;; We have to use find-file to open the buffer
      ;; because initial-buffer-choice selects the buffer the function returns.
      ;; instead of visiting/finding the file/directory when given a string.
      (lambda nil
        (find-file
         (get-wd))))
(add-to-list 'load-path "~/.emacs.d/elpa/")
#+end_src
* straight
:LOGBOOK:
CLOCK: [2022-01-25 Tue 20:10]--[2022-01-25 Tue 21:10] =>  1:00
CLOCK: [2022-01-05 Wed 22:07]--[2022-01-05 Wed 22:37] =>  0:30
CLOCK: [2022-01-05 Wed 18:23]--[2022-01-05 Wed 18:30] =>  0:07
CLOCK: [2022-01-05 Wed 16:18]--[2022-01-05 Wed 17:22] =>  1:04
:END:
https://systemcrafters.cc/advanced-package-management/using-straight-el/
#+begin_src emacs-lisp :tangle yes
(straight-use-package 'use-package)
#+end_src
* quelpa
#+begin_src emacs-lisp :tangle no
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
#+end_src
* ein
:LOGBOOK:
CLOCK: [2022-01-20 Thu 09:06]--[2022-01-20 Thu 09:23] =>  0:17
CLOCK: [2022-01-20 Thu 08:54]--[2022-01-20 Thu 08:59] =>  0:05
:END:
Use straight to manage ein.
#+begin_src emacs-lisp :tangle no
(use-package ein
  :defer t
  :straight (:host github :repo "yatsky/emacs-ipython-notebook" :branch "yaoni")
  :init
  (setq ein:output-area-inlined-images t)
  (setq ein:polymode t)
  (setq ob-ein-languages
        '(("ein-python" . python)
          ("ein-R" . R)
          ("ein-r" . R)
          ("ein-julia" . julia)))
  (setq org-babel-load-languages
        '((js . t)
          (java . t)
          (python . t)
          (emacs-lisp . t)
          (shell . t)
          (ditaa . t)
          (ein . t))))
#+end_src
* cnfonts
~cnfonts~ might not work with some fonts. Also need to make sure that the fonts that you want to use are both in the system and in the ~cnfonts--custom-set-fontnames~. See [[https://github.com/tumashu/cnfonts/issues/113][my issue]].
#+begin_src emacs-lisp :tangle yes
(use-package cnfonts
  :straight t
  :config
  ;; 让 cnfonts 随着 Emacs 自动生效。
  (cnfonts-enable)
  (setq cnfonts-profiles
        '("program" "org-mode" "read-book")))
;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
;; (cnfonts-set-spacemacs-fallback-fonts)
#+end_src

#+caption: Testing table of cnfonts
#+name: Testing table of cnfonts
| h1   | h1   |
| 中文 | 中文 |
* diminish
#+begin_src emacs-lisp :tangle yes
(use-package diminish
  :straight t)
#+end_src
* eshell
Extracted from here: http://www.modernemacs.com/post/custom-eshell/

Code: https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5

#+begin_src emacs-lisp :tangle yes
(use-package dash
  :straight t)

#+end_src
#+begin_src emacs-lisp :tangle yes

(require 'cl)
(require 'dash)
(require 's)

(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &rest PROPS)
  "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  `(setq ,NAME
         (lambda () (when ,FORM
                                        ;< this left angle bracket was added so that org mode matches it with the following one
                      (-> ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  "Accumulator for evaluating and concatenating esh-sections."
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  "Build `eshell-prompt-function'"
  (concat esh-header
          (-reduce-from 'esh-acc "" eshell-funcs)
          "\n"
          eshell-prompt-string))

;; Separator between esh-sections
(setq esh-sep "  ") ;; r " | "

;; Separator between an esh-section icon and form
(setq esh-section-delim " ")

;; Eshell prompt header
(setq esh-header "\n ") ;; r "\n┌─"

;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
;; your login, these can be the same.
(setq eshell-prompt-regexp "└─> ")  ;; r "└─> "
(setq eshell-prompt-string "└─> ")  ;; r "└─> "

(esh-section esh-dir
             "\xf07c" ;;  (faicon folder)
                                        ;"fake-dir"
             (abbreviate-file-name (eshell/pwd))
             '(:foreground "gold" :bold ultra-bold :underline t))

(esh-section esh-git
                                        ;"\xe907" ;;  (git icon)
             ""
             (magit-get-current-branch)
             '(:foreground "pink"))

(esh-section esh-python
             "\xe928" ;;  (python icon)
             venv-current-name
             '(:foreground "pink"))

(esh-section esh-clock
             "\xf017" ;;  (clock icon)
                                        ;"fake-clock"
             (format-time-string "%H:%M" (current-time))
             '(:foreground "forest green"))

;; Below I implement a "prompt number" section
(setq esh-prompt-num 0)
(add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
(advice-add 'eshell-send-input :before
            (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             "\xf0c9" ;;  (list icon)
                                        ;"fake-num"
             (number-to-string esh-prompt-num)
             '(:foreground "brown"))

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-clock esh-python esh-num))

;; Enable the new eshell prompt
(setq eshell-prompt-function 'esh-prompt-func)
#+end_src
* Keymaps
:LOGBOOK:
CLOCK: [2022-03-27 Sun 14:49]--[2022-03-27 Sun 14:52] =>  0:03
CLOCK: [2022-03-27 Sun 14:35]--[2022-03-27 Sun 14:41] =>  0:06
CLOCK: [2022-03-27 Sun 12:24]--[2022-03-27 Sun 14:33] =>  2:09
:END:
#+begin_src emacs-lisp :tangle yes
(use-package general
  :defer t
  :straight t)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     Functions for key bindings    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         Global keybindings        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-previous-window()
  "Go to the previous window"
  (interactive)
  (other-window -1))
;; {{
(general-define-key
 :states '(motion visual normal)
 :keymaps 'override
 ;;  -> redo
 "r" 'undo-tree-redo
 "0" 'delete-window
 "1" 'my-previous-window
 "2" 'other-window
 "3" 'split-window-right
 "4" 'split-window-below
 "5" 'toggle-multi/one-window
 "9" 'other-frame
 "'" 'xah-forward-quote-smart
 "\"" 'xah-backward-quote
 ;; \"
 "(" 'xah-backward-left-bracket
 ")" 'xah-forward-right-bracket)
;; }}

;; Remap SPC in evil mode to a leader key
(general-create-definer my-global-leader
  :states '(normal visual)
  ;; :prefix my-leader
  :keymaps 'override
  :prefix "SPC"
  :non-normal-prefix "C-SPC")

(general-create-definer my-global-text-leader
  ;; for faster text operations
  :prefix ",")

(general-create-definer grammatical-edit-leader
  :states '(normal visual)
  :keymaps 'grammatical-edit-mode-map
  :prefix "g")

(general-create-definer my-global-misc-leader
  ;; for future operations
  :prefix "m")

;; Remap SPC o to org mode leader key
(general-create-definer yaoni-org-leader-def
  :states '(normal visual)
  :prefix "SPC o"
  :non-normal-prefix "C-c")

(general-create-definer yaoni-tag-leader-def
  :states '(normal visual insert)
  :prefix "SPC n"
  :non-normal-prefix "C-c n")

(my-global-text-leader
  :states '(motion normal)
  :keymaps 'override

  "e" 'evil-end-of-line
  "b" 'evil-beginning-of-line
  "a" 'evil-append-line
  "s" 'swiper-thing-at-point
  "m" 'yaoni/mark-node
  )

(my-global-leader

  ;;  -> load
  "l i" (lambda() (interactive) (load-file "~/.emacs.d/init.el"))
  "o a" 'org-agenda
  "." 'evil-repeat

  ;;  -> delete
  "d o w" 'delete-other-windows
  ;;  -> run

  ;; Ivy version of ‘execute-extended-command’.
  ;; https://github.com/abo-abo/swiper/issues/294#issuecomment-157871131
  "e" 'counsel-M-x

  ;;  -> switch
  ;; witch to buffer
  "s b" 'switch-to-buffer
  "s f" 'other-frame
  "s w l" 'evil-window-right
  "s w h" 'evil-window-left
  "s w k" 'evil-window-up
  "s w j" 'evil-window-down

  ;;  -> search
  "s i" 'isearch-forward

  ;;  -> search grep current directory
  ;; "s g c"
  ;;  -> search grep project directory (where .git/ is)
  "s g p" 'counsel-git-grep

  ;;  -> search grep filename (where .git/ is)
  "s g f" 'counsel-git

  ;;  -> write
  "w b" 'save-buffer

  ;;  -> open
  "o f" 'counsel-find-file
  "o z" (lambda() (interactive) (counsel-find-file nil (vc-root-dir)))
  ;; et-key expects an interactive command
  "o i" (lambda() (interactive) (find-file "~/.emacs.d"))
  ;; rame size
  ;; nc frame width
  "i f w" 'inc-frame-width
  "d f w" 'dec-frame-width
  "i f h" 'inc-frame-height
  "d f h" 'dec-frame-height

  ;; agit-status
  "m s" 'magit-status


  ;; X command
  "x" 'evil-ex

  "k" 'kill-buffer

  "v w" 'venv-workon

  "g t" 'git-timemachine-toggle

  ;; don't confirm revert-buffer
  "r b" '(lambda() (interactive) (revert-buffer nil t))

  "v c" 'vc-msg-show
  )



(with-eval-after-load 'gif-screencast
  (define-key gif-screencast-mode-map (kbd "<f8>") 'gif-screencast-toggle-pause)
  (define-key gif-screencast-mode-map (kbd "<f9>") 'gif-screencast-stop))

;; auto-complete
(with-eval-after-load 'auto-complete
  (define-key ac-complete-mode-map "\C-n" 'ac-next)
  (define-key ac-complete-mode-map "\C-p" 'ac-previous))
#+end_src
** Jumping between parens (sexp)
#+begin_src elisp :tangle yes
(my-global-leader

  "m f" 'forward-sexp
  "m b" 'backward-sexp
)
#+end_src

* elpy
:LOGBOOK:
CLOCK: [2022-03-04 Fri 17:21]--[2022-03-04 Fri 17:23] =>  0:02
CLOCK: [2022-02-27 Sun 10:50]--[2022-02-27 Sun 11:09] =>  0:19
CLOCK: [2022-02-06 Sun 20:25]--[2022-02-06 Sun 21:03] =>  0:38
:END:
#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :defer t
  :straight t
  :custom
  ;; tell elpy to use the virtual env set by virtualenv
  (elpy-rpc-virtualenv-path 'current)
  (elpy-shell-echo-output nil)
  (python-shell-completion-native-enable nil)
  (elpy-rpc-backend "jedi")
  (python-indent-offset 4)
  (python-indent 4)
  (define-key elpy-mode-map (kbd "C-o") 'xref-pop-marker-stack)
  (elpy-rpc-timeout 10)
  :config
  (elpy-enable)
  (my-global-leader
	"g d" 'elpy-goto-definition-other-window)
  (my-global-leader
	"g a" 'elpy-goto-assignment))


#+end_src
* Smartparens
Lisp editing.
#+begin_src elisp :tangle yes
(use-package smartparens
  :straight t
  :ensure t
  :init
  (require 'smartparens-config)
  :config
  (progn
    (show-smartparens-global-mode t)
    (my-global-leader
      "s s f" 'sp-forward-slurp-sexp
      "s s b" 'sp-backward-slurp-sexp
      ;; barf - vomit - v
      "s v f" 'sp-forward-barf-sexp
      "s v b" 'sp-backward-barf-sexp
      "s w r" 'sp-wrap-round
      "s w c" 'sp-unwrap-sexp)))
;; might not work in PHP but I don't program PHP.
(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
;; in org mode there are a lot of non-matching parens so ignore them.
;; (add-hook 'org-mode-hook 'turn-on-smartparens-strict-mode)

#+end_src
* Evil
:LOGBOOK:
CLOCK: [2022-06-25 Sat 20:26]--[2022-06-25 Sat 20:39] =>  0:13
:END:
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :straight t
  :init
  ;; evil org
  (setq evil-want-keybinding nil)
  ;; enable TAB in terminal mode
  ;; https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working
  (setq evil-want-C-i-jump nil)
  ;; allow cursor to move to the newline character
  ;; so that regex-search-forward can search properly
  (setq evil-move-beyond-eol t)
  :config
  (setq evil-goto-definition-functions (append evil-goto-definition-functions '((lambda (string pos) (lsp-bridge-find-def)))))
  :general
  (evil-insert-state-map
   "C-y" 'evil-paste-before)
  (evil-normal-state-map
   "gh" 'beginning-of-defun)
  (evil-normal-state-map
   "gj" 'end-of-defun))

;; Add this advice so that when I look at definition
;; I won't lose the original code
(defun yaoni/split-window-right (&rest args)
  (split-window-right)
  (balance-windows))
(advice-add 'evil-goto-definition :before #'yaoni/split-window-right)

(use-package evil-collection
  :straight t
  :config
  (evil-collection-init))

(use-package evil-org
  :straight t
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar)))
(use-package evil-org-agenda
  :config
  (evil-org-agenda-set-keys)
  (evil-mode 1))

;; evil surround
(use-package evil-surround
  :straight t
  :config
  (global-evil-surround-mode 1))

(use-package evil-escape
  :straight t
  :init
  (setq evil-escape-delay 0.3)
  (setq evil-escape-unordered-key-sequence t)
  (setq evil-escape-excluded-major-modes '(dired-mode))
  (setq-default evil-escape-key-sequence "jk")
  ;; Move back the cursor one position when exiting insert mode
  (setq evil-move-cursor-back t)
  :config
  ;; disable evil-escape when input method is on
  (evil-escape-mode 1))
#+end_src
* Magit
Magit settings.
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :straight t
  :defer t
  :init
  ;; call this function so that eshell can use magit-get-current-branch.
  ;; https://github.com/magit/ssh-agency/issues/19
  (magit-version)
  (setq ssh-agency-socket-locaters '((ssh-agency-find-socket-from-ss :glob "*ssh*" :regexp #1="/\\(?:agent[.][0-9]+\\|ssh\\)\\'")
                                     (ssh-agency-find-socket-from-netstat :regexp #1#)
                                     (ssh-agency-find-socket-from-glob "/tmp/ssh-*/agent.*")))
  (setq ssh-agency-socket-locaters
        (assq-delete-all 'ssh-agency-find-socket-from-netstat
                         ssh-agency-socket-locaters)))
#+end_src
* git-gutter
:LOGBOOK:
CLOCK: [2021-08-26 Thu 10:55]--[2021-08-26 Thu 11:05] =>  0:10
CLOCK: [2021-08-26 Thu 10:51]--[2021-08-26 Thu 10:54] =>  0:03
CLOCK: [2021-08-26 Thu 10:24]--[2021-08-26 Thu 10:49] =>  0:25
CLOCK: [2021-08-26 Thu 10:07]--[2021-08-26 Thu 10:17] =>  0:10
:END:
#+begin_src emacs-lisp :tangle yes
(use-package git-gutter
  :straight t
  :defer t
  :general
  (my-global-leader
    ;; git-gutter
    "g g p" 'git-gutter:previous-hunk
    "g g n" 'git-gutter:next-hunk
    "g g m" 'git-gutter:mark-hunk
    "g g s" 'git-gutter:stage-hunk
    "g g r" 'git-gutter:revert-hunk
    "g g h p" '(lambda () (interactive) (git-gutter-reset-to-head-parent))
    "g g h d" '(lambda () (interactive) (git-gutter-reset-to-default))))
#+end_src

Compare current HEAD with its parent.
https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/developer-guide-en.org#git
#+begin_src emacs-lisp :tangle yes
(defun git-gutter-reset-to-head-parent()
  (interactive)
  (let (parent (filename (buffer-file-name)))
    (if (eq git-gutter:vcs-type 'svn)
        (setq parent "PREV")
      (setq parent (if filename (concat (shell-command-to-string (concat "git --no-pager log --oneline -n1 --pretty=\"format:%H\" " filename)) "^") "HEAD^")))
    (git-gutter:set-start-revision parent)
    (message (concat "git-gutter:set-start-revision " parent))))
(defun git-gutter-reset-to-default ()
  (interactive)
  (git-gutter:set-start-revision nil)
  (message "git-gutter reset"))
#+end_src
* git-timemachine
#+begin_src emacs-lisp :tangle yes
(use-package git-timemachine
  :straight t
  :defer t)
#+end_src
* vc-msg
#+begin_src emacs-lisp :tangle yes
(use-package vc-msg
  :straight (:host github
             :repo "redguardtoo/vc-msg"
             :branch "master"
             :files ("*.el" "out"))
  :defer t)
#+end_src
* Miscellaneous setup
Stuff that I haven't decided where to put (or never will!).
Mostly consists of system settings.
** vanilla Emacs
:LOGBOOK:
CLOCK: [2020-06-27 Sat 17:10]--[2020-06-27 Sat 17:13] =>  0:03
:END:
#+begin_src emacs-lisp :tangle yes
;; Setting (tool-bar-mode nil) actually enables tool bar when running lisp code.
(tool-bar-mode -1)
(global-display-line-numbers-mode t)

;; 设置垃圾回收，在Windows下，emacs25版本会频繁出发垃圾回收，所以需要设置
;; This solves the problem that affects Emacs' speed while displaying Chinese characters
(when (eq system-type 'windows-nt) (setq gc-cons-threshold (* 512 1024 1024))
      (setq gc-cons-percentage 0.5) (run-with-idle-timer 5 t #'garbage-collect)
      ;; 显示垃圾回收信息，这个可以作为调试用
      ;; (setq garbage-collection-messages t)
      )
;; show-paren-mode
;; (show-paren-mode 1)
;; (setq show-paren-style 'mixed)

;; wrap lines
(global-visual-line-mode 1)

(if (display-graphic-p)
    (progn
      ;; disable sound
      (setq visible-bell 1)
      ;; save/restore opened files and windows config
      (desktop-save-mode nil)))
#+end_src

** Frame and window
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          Frame and Window          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if (display-graphic-p) 
    (progn
      (set-frame-size (selected-frame) 1350 950 t)
      (defmacro gen-frame-size-func (w-or-h inc)
        "inc/dec-frame-width/height"
        ;; (set-frame-height (selected-frame) (+ (frame-native-height (selected-frame)) 20) nil t)
        ;; use let* so that we can refer to the `inc-or-dec' right away in `let'.
        (let* ((set-func (intern (concat "set-frame-" w-or-h)))
               (get-func (intern (concat "frame-native-" w-or-h)))
               ;; not sure why but it seems 20 is the minimum offset required for the change to take effect
               (value (if (string-equal w-or-h "width") 40 40))
               (inc-or-dec (if inc "inc" "dec"))
               (doc (format "%s the current frame %s." inc-or-dec w-or-h))
               (positive (if inc 1 -1)))

          ;; The comma `,' causes Emacs to evaluate everything in the list it precedes
          ;; so there is no need to place a comma before the variables in the list
          ;; if you want it to be evaluated.
          ;; FIXME: Need to figure out what @ does.
          `(defun ,(intern (concat inc-or-dec "-frame-" w-or-h)) ()
             ,doc
             (interactive)
             (message ,(number-to-string (* positive value)))
             (,set-func (selected-frame) (+ (,get-func (selected-frame)) ,(* positive value)) nil t))))

      (gen-frame-size-func "width" t)
      (gen-frame-size-func "width" nil)
      (gen-frame-size-func "height" nil)
      (gen-frame-size-func "height" t)))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; from https://gist.github.com/3402786
;; and https://emacs-china.org/t/topic/12544/7
(defun toggle-multi/one-window ()
  "Toggle between multi-window config and single window."
  (interactive)
  (save-excursion
    (if (and (= 1 (length (window-list)))
	     (assoc ?_ register-alist))
	(jump-to-register ?_)
      (progn
	(window-configuration-to-register ?_)
	(delete-other-windows)))))
#+end_src
** Keyfreq
Keyfreq exclude some commands
#+begin_src emacs-lisp :tangle yes
(use-package keyfreq
  :straight t
  :defer t
  :init
  (setq keyfreq-excluded-commands
        '(self-insert-command org-self-insert-command
                              evil-next-line evil-previous-line evil-forward-word-begin evil-backward-word-begin evil-forward-char
                              evil-normal-state
                              evil-insert
                              ;; backspace in insert mode
                              evil-delete-backward-char-and-join
                              ;; used in evil-search-word-forward for incremental search
                              isearch-printing-char
                              evil-next-visual-line
                              save-buffer
                              evil-previous-visual-line
                              evil-forward-word-end
                              other-window
                              ))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src
* org
:LOGBOOK:
CLOCK: [2020-07-17 Fri 21:42]--[2020-07-17 Fri 21:48] =>  0:06
:END:
My org mode setup.
** global
:LOGBOOK:
CLOCK: [2020-07-26 Sun 11:09]--[2020-07-26 Sun 11:10] =>  0:01
CLOCK: [2020-07-26 Sun 11:05]--[2020-07-26 Sun 11:06] =>  0:01
CLOCK: [2020-07-26 Sun 11:05]--[2020-07-26 Sun 11:05] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;             Org-global            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq org-directory (mapconcat 'file-name-as-directory `(,(get-wd) "orgs") ""))
;; include entries from the Emacs diary into Org mode's agenda
(setq org-agenda-include-diary t)
;; turn on indent mode in Org
(add-hook 'org-mode-hook 'org-indent-mode)

;; capture
(setq org-default-notes-file (concat org-directory "inbox.org"))

;; cater for whitespace sensetive languages
(setq org-edit-src-content-indentation 4)
(setq org-src-fontify-natively t)
(setq org-src-preserve-indentation t)

;; et default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
;; set effort estimates
(setq org-global-properties (quote (("Effort_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))

;; org clock in mode line to show only the time
;; passed during the current clock instance.
;; Using auto or all makes it hard for me to track how
;; long I have spent on the current task.
;; This also makes it easier to use the Tomato Timer.
(setq org-clock-mode-line-total 'current)

;; So that when I run org-clock-in it doesn't check every org file for dangling clocks.
(setq org-clock-auto-clock-resolution nil)
#+end_src
** agenda
:LOGBOOK:
CLOCK: [2022-08-06 Sat 20:54]--[2022-08-06 Sat 21:06] =>  0:12
CLOCK: [2020-05-11 Mon 19:29]--[2020-05-11 Mon 19:31] =>  0:02
CLOCK: [2020-05-05 Tue 10:49]--[2020-05-05 Tue 10:52] =>  0:03
:END:
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;               Agenda              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Agenda
(defun org-agenda-files-paths (cur-wd list)
  "Generate a list of file paths based on `get-wd' for variable `org-agenda-files'"
  (let (new-list)
    (dolist (element list new-list)
      (setq new-list (cons (concat cur-wd element) new-list)))))

;; this is in work_files.org.gpg
(let ((private-file "~/.emacs.d/private.el"))
  (if (file-directory-p private-file)
      (load-file private-file)))

#+end_src
** ob-lang
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          ob-lang settings         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enable python source code eval
(require 'ob-python)
;; enable javascript source code eval
(require 'ob-js)
(require 'ob-shell)
(add-to-list 'org-babel-load-languages '(ditaa . t))
(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
#+end_src
** my org setup
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            My org seup            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my-org-setup ()
  "Set up my org settings."

  (defun org-open-org-directory ()
    (interactive)
    (find-file org-directory))

  (yaoni-org-leader-def
    :states 'normal
    :keymaps 'override
    "t" (kbd "C-u M-x org-time-stamp-inactive")
    "l" 'org-shiftright
    "h" 'org-shiftleft
    "o" 'org-open-org-directory
    "c i" 'org-clock-in
    "c o" 'org-clock-out
    "c f" 'counsel-org-goto
    "g g" 'search-word
    "r i" 'org-roam-node-insert
    "r f" 'org-roam-node-find
    ;; org roam add id
    "r a i" 'org-id-get-create
    "r a t" 'org-roam-tag-add
    ;; forward one line so that the cursor is not on the begin_src line
    "n" '(lambda () (interactive) (org-babel-next-src-block) (forward-line))
    "p" '(lambda () (interactive) (org-babel-previous-src-block) (forward-line))
    ;; org copy src
    "c s" 'org-copy-src-block
    "c c" 'yaoni/org-cycle
    "s i" 'org-display-inline-images
    "s n" 'org-narrow-to-subtree
    "s w" 'widen
    "g h" 'yaoni/org-get-heading)

  (defun search-word ()
    "Search the word marked or at point."
    (interactive)
    (let (pos1 pos2 bds)
      (if (use-region-p)
          (setq pos1 (region-beginning) pos2 (region-end))
        (progn
          (setq bds (bounds-of-thing-at-point 'symbol))
          (setq pos1 (car bds) pos2 (cdr bds))))
      (shell-command (concat "'/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe' 'https://www.startpage.com/do/dsearch?query='" (replace-regexp-in-string " " "+" (buffer-substring-no-properties pos1 pos2)))))))

(with-eval-after-load "org"
  (my-org-setup))

#+end_src

org mode seems to be not respecting formats with Chinese characters after certain version.
It will not render *bold*, /italic/ or _underscore_.
The fix is from: https://emacs-china.org/t/orgmode/9740/17
#+begin_src elisp :tangle yes
(setq org-emphasis-regexp-components '("-[:multibyte:][:space:]('\"{" "-[:multibyte:][:space:].,:!?;'\")}\\[" "[:space:]" "." 1))
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
(org-element-update-syntax)
#+end_src
Set up time format in clock report.
#+begin_src emacs-lisp :tangle yes
(setq org-duration-format (quote h:mm))
#+end_src

The following allows any #+LAST_MODIFIED headers to be updated on file-save:
(copied from [[https://github.com/skx/dotfiles/blob/master/.emacs.d/init.md#org-mode-timestamping][here]]).
#+begin_src emacs-lisp :tangle yes
(defun yaoni/update-org-modified-property ()
  "If a file contains a '#+LAST_MODIFIED' property update it to contain
  the current date/time"
  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^#\\+LAST_MODIFIED:" (point-max) t)
      (progn
        (kill-line)
        (insert (format-time-string " %d/%m/%Y %H:%M:%S") )))))
#+end_src

Add it to org-mode hook.
#+begin_src emacs-lisp :tangle yes
(defun yaoni-org-mode-before-save-hook ()
  (when (eq major-mode 'org-mode)
    (yaoni/update-org-modified-property)))

(add-hook 'before-save-hook #'yaoni-org-mode-before-save-hook)

#+end_src
** modules
:LOGBOOK:
CLOCK: [2022-06-25 Sat 21:38]--[2022-06-25 Sat 21:41] =>  0:03
:END:
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            org-modules            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; do not use any tabs
;; this is added to prevent picture mode from inserting tabs
;; while we are drawing ascii images
;; we do not use tabs anyway so leave it globally on
(setq-default indent-tabs-mode nil)

;; Ditaa settings
;; isable Artist mode in org-src-mode when editing ditaa code
;; his is because Artist mode seems to prevent me from typing arrows (< and >)
(defun setup-ditaa ()
  "Setting up the ditaa env for org-src-mode"
  (message "In ditaa mode %s"(buffer-name))
  (evil-emacs-state)
  (display-line-numbers-mode))

(add-hook 'org-src-mode-hook
          (lambda ()
            (if (string-match-p (regexp-quote "ditaa") (buffer-name))
                ;; fixme: need to fix this
                ;; seems to be not calling this function
                (setup-ditaa))))
#+end_src

ox-reveal settings.
This block makes ox-reveal to export images wrapped in ~<figure>~ tag
so that we can later add a ~r-stretch~ class to them for fitting them vertically.
See: https://github.com/yjwen/org-reveal/issues/388
#+begin_src emacs-lisp :tangle yes
(setq org-html-html5-fancy t
      org-html-doctype "html5")
#+end_src


ox-latex settings.
#+begin_src emacs-lisp :tangle yes
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-latex-minted-options
      '(("frame" "lines")  ("linenos" "") ("style" "friendly")))

(require 'ox-md)
#+end_src
** org-id
#+begin_src emacs-lisp :tangle yes
(setq org-id-track-globally t)
(setq org-id-locations-file "~/.emacs.d/.org-id-locations")
#+end_src
** org-download
Configuration from [[https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/][here]].

Need to install [[https://github.com/jcsalterego/pngpaste][pngpaste]] too.
#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :straight t
  :after org
  :defer t
  :init
  ;; https://github.com/abo-abo/org-download/issues/178#issuecomment-974772904
  (defun yaoni/yank-image-from-win-clipboard-through-powershell()
    "to simplify the logic, use c:/Users/Public as temporary directoy, and move it into current directoy"
    (interactive)
    (let* ((powershell "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe")
           (file-name (format-time-string "screenshot_%Y%m%d_%H%M%S.png"))
           ;; (file-path-powershell (concat "c:/Users/\$env:USERNAME/" file-name))
           (file-path-wsl (concat "./images/" file-name))
           )
      ;; (shell-command (concat powershell " -command \"(Get-Clipboard -Format Image).Save(\\\"C:/Users/\\$env:USERNAME/" file-name "\\\")\""))
      (shell-command (concat powershell " -command \"(Get-Clipboard -Format Image).Save(\\\"C:/Users/Public/" file-name "\\\")\""))
      (rename-file (concat "/mnt/c/Users/Public/" file-name) file-path-wsl)
      (insert (concat "[[file:" file-path-wsl "]]"))
      (message "insert DONE.")))
  (defun yaoni/org-download-yank ()
    "Yank image depending on the OS."
    (interactive)
    (cond ((eq system-type 'darwin)
           (org-download-screenshot))
          (t
           (yaoni/yank-image-from-win-clipboard-through-powershell))))
  :custom
  (org-download-method 'directory)
  ;; Can only use jpeg. png files will have a greyed out/washed effect on the image.
  ;; see: https://github.com/jcsalterego/pngpaste/issues/16
  (org-download-screenshot-basename "screenshot.jpeg")
  (org-download-image-dir "images")
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  (org-image-actual-width 1000)
  (org-download-screenshot-method "pngpaste %s")
  :bind
  ("C-M-y" . yaoni/org-download-yank)
  :config
  (require 'org-download))
#+end_src
** custom functions
:LOGBOOK:
CLOCK: [2022-06-03 Fri 20:04]--[2022-06-03 Fri 20:11] =>  0:07
:END:
Copy the content in the current source block to the kill-ring.
#+begin_src emacs-lisp :tangle yes
(defun org-copy-src-block ()
  (interactive)
  (org-edit-src-code)
  (mark-whole-buffer)
  (kill-ring-save nil nil t)
  (org-edit-src-abort))
#+end_src

Get the heading text. Quite useful for getting Jira ticket number.
#+begin_src emacs-lisp :tangle yes
(defun yaoni/org-get-heading ()
  "Get the heading text."
  (interactive)
  (kill-new (nth 4 (org-heading-components))))
#+end_src

* org-roam
:LOGBOOK:
CLOCK: [2022-06-16 Thu 14:01]--[2022-06-16 Thu 14:41] =>  0:40
CLOCK: [2022-03-18 Fri 21:31]--[2022-03-18 Fri 21:44] =>  0:13
CLOCK: [2022-03-18 Fri 21:06]--[2022-03-18 Fri 21:29] =>  0:23
CLOCK: [2022-01-25 Tue 15:28]--[2022-01-25 Tue 15:37] =>  0:09
CLOCK: [2021-10-30 Sat 21:47]--[2021-10-30 Sat 22:21] =>  0:34
CLOCK: [2021-09-03 Fri 22:14]--[2021-09-03 Fri 22:14] =>  0:00
CLOCK: [2021-09-03 Fri 21:58]--[2021-09-03 Fri 22:14] =>  0:16
CLOCK: [2021-01-13 Wed 08:44]--[2021-01-13 Wed 10:08] =>  1:24
:END:
org-roam also wants ~gcc~ to be installed.
So run this ~sudo apt-get install gdb~.
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :straight t
  ;; using custom here seems to be not working.
  ;; we need to set the vars first then run the hook above
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-server-mode t)
  (setq org-roam-directory org-directory)
  (setq org-roam-tag-sources
        '(prop all-directories))
  (setq org-roam-capture-templates
        `(("d" "default" plain "%?"
           :if-new
           (file+head "%<%Y-%m-%d-%H%M%S>-${slug}.org"
                      "#+title: ${title}\n\n\n* Source\n\n* Log time")
           :unnarrowed t)
          ("l" "leetcode" plain "%?"
           :if-new
           (file+head ,(concat (file-name-as-directory org-roam-directory) "leetcode/%<%Y-%m-%d-%H%M%S>-${slug}.org")
                      "#+title: ${title}\n")
           :unnarrowed t)
          ("e" "encrypted-note" plain "%?"
           :if-new
           (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg"
                      "#+title: ${title}\n")
           :unnarrowed t)))
  (setq org-roam-dailies-capture-templates
        `(("d" "encrypted-daily" plain "%?"
           :if-new
           (file+head "%<%Y-%m-%d>.org.gpg"
                      "#+title: %<%Y-%m-%d>\n"))))
  (setq org-roam-file-exclude-regexp ".*.org.gpg")
  :config
  ;; reference: https://orgmode-exocortex.com/2021/07/22/configure-org-roam-v2-to-update-database-only-when-idle/
  (defvar yaoni/org-roam-db-update-queue (list)
    "List of files to be updated.")
  ;; save the original update function;
  (setq orig-update-file (symbol-function 'org-roam-db-update-file))

  ;; then redefine the db update function to add the filename to a queue
  (defun yaoni/org-roam-db-push-file (&optional file-path)
    ;; do same logic as original to determine current file-path if not passed as arg
    (setq file-path (or file-path (buffer-file-name (buffer-base-buffer))))
    ;; (message "org-roam: scheduling update of %s" file-path)
    (if (not (memq file-path yaoni/org-roam-db-update-queue))
        (push file-path yaoni/org-roam-db-update-queue)))

  ;; this function will be called when emacs is idle for a few seconds
  (defun yaoni/org-roam-db-idle-update-files ()
    ;; go through queued filenames one-by-one and update db
    ;; if we're not idle anymore, stop. will get rest of queue next idle.
    ;; (message "org-roam: updating db")
    (while (and yaoni/org-roam-db-update-queue (current-idle-time))
      ;; apply takes function var and list
      (apply orig-update-file (list (pop yaoni/org-roam-db-update-queue)))))

  ;; add to local hook 'after-save-hook when in org-mode
  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'yaoni/org-roam-db-push-file nil 1)))
  ;; we'll only start updating db if we've been idle for this many seconds
  (run-with-idle-timer 60 t #'yaoni/org-roam-db-idle-update-files)

  :bind (:map evil-insert-state-map
              ("C-M-i" . org-roam-node-insert)))
#+end_src

#+begin_src emacs-lisp :tangle no
;; function to update all org roam file ids. see: https://org-roam.discourse.group/t/org-roam-v2-org-id-id-link-resolution-problem/1491
;; Otherwise export won't work and you can't jump between files using `C-c C-o'.
(org-id-update-id-locations
 (org-roam-list-files))
#+end_src

How to export backlinks on org-export.
https://org-roam.discourse.group/t/export-backlinks-on-org-export/1756/33?page=2
#+begin_src emacs-lisp :tangle no
(defun collect-backlinks-string (backend)
  (when (org-roam-node-at-point)
    (let* ((source-node (org-roam-node-at-point))
           (source-file (org-roam-node-file source-node))
           ;; Sort the nodes by the point to avoid errors when inserting the
           ;; references
           (nodes-in-file (--sort (< (org-roam-node-point it)
                                     (org-roam-node-point other))
                                  (-filter (lambda (node)
                                             (s-equals?
                                              (org-roam-node-file node)
                                              source-file))
                                           (org-roam-node-list))))
           ;; Nodes don't store the last position so, get the next node position
           ;; and subtract one character
           (nodes-start-position (-map (lambda (node) (org-roam-node-point node))
                                       nodes-in-file))
           (nodes-end-position (-concat (-map (lambda (next-node-position)
                                                (- next-node-position 1))
                                              (-drop 1 nodes-start-position))
                                        (list (point-max))))
           ;; Keep track of the current-node index
           (current-node 0)
           ;; Keep track of the amount of text added
           (character-count 0))
      (dolist (node nodes-in-file)
        (when (org-roam-backlinks-get node)
          ;; Go to the end of the node and don't forget about previously inserted
          ;; text
          (goto-char (+ (nth current-node nodes-end-position) character-count))
          ;; Add the references as a subtree of the node
          (setq heading (format "\n\n%s References\n"
                                (s-repeat (+ (org-roam-node-level node) 1) "*")))
          ;; Count the characters and count the new lines (4)
          (setq character-count (+ 3 character-count (string-width heading)))
          (insert heading)
          ;; Insert properties drawer
          (setq properties-drawer ":PROPERTIES:\n:HTML_CONTAINER_CLASS: references\n:END:\n")
          ;; Count the characters and count the new lines (3)
          (setq character-count (+ 3 character-count (string-width properties-drawer)))
          (insert properties-drawer)
          (dolist (backlink (org-roam-backlinks-get node))
            (let* ((source-node (org-roam-backlink-source-node backlink))
                   (point (org-roam-backlink-point backlink))
                   (text (with-temp-buffer
						   (message "%s" (org-roam-node-file source-node))
						   (insert-file-contents (org-roam-node-file source-node))
						   (buffer-substring point (point-max))))
				   (references (format "* [[./%s][%s]]: %s\n\n"
									   (file-relative-name (org-roam-node-file source-node))
									   (org-roam-node-title source-node)
									   text)))
              ;; Also count the new lines (2)
              (setq character-count (+ 2 character-count (string-width references)))
              (insert references))))
		(setq current-node (+ current-node 1))))))
(add-hook 'org-export-before-processing-hook 'collect-backlinks-string)
#+end_src
** TODO [[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]
:PROPERTIES:
:ID:       73fc703f-0d6d-47bf-bfe7-5d03c90c49e0
:END:
** org-roam-ui
:LOGBOOK:
CLOCK: [2021-08-19 Thu 20:10]--[2021-08-19 Thu 20:22] =>  0:12
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-roam-ui
  :straight
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;; a hookable mode anymore, you're advised to pick something yourself
  ;; if you don't care about startup time, use
  ;; :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
* latex
:LOGBOOK:
CLOCK: [2022-01-26 Wed 20:42]--[2022-01-26 Wed 20:54] =>  0:12
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-latex-impatient
  :straight t
  :defer t
  :hook (org-mode . org-latex-impatient-mode)
  :init
  (setq org-latex-impatient-tex2svg-bin
        ;; location of tex2svg executable
        "~/node_modules/mathjax-node-cli/bin/tex2svg"))
#+end_src
* pyim
:LOGBOOK:
CLOCK: [2022-06-26 Sun 15:07]--[2022-06-26 Sun 15:22] =>  0:15
:END:

#+begin_src emacs-lisp :tangle yes
;; pyim
(use-package pyim
  :straight
  (:host github :repo "tumashu/pyim" :files
         ("*.el" "out"))
  :init
  (use-package pyim-tsinghua-dict
    :straight (:host github :repo "redguardtoo/pyim-tsinghua-dict" :files
                     ("*.el" "*.py" "*.pyim" "*.csv")))
  ;; (设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))
  (setq pyim-pinyin-fuzzy-alist nil)
  ;; 文使用全角标点，英文使用半角标点。
  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
  (require 'pyim-cregexp-utils)
  ;; 不需要模糊音
  (setq pyim-pinyin-fuzzy-alist nil)
  ;; 使用 Google 云输入
  (setq pyim-cloudim 'google)
  :bind
  ("C-\\" . toggle-input-method)
  ("C-]" . pyim-convert-string-at-point)
  ;; pyim-probe-dynamic-english 配合
  ("C-;" . pyim-delete-word-from-personal-buffer)
  :custom
  (default-input-method "pyim")
  (pyim-default-scheme 'quanpin)
  (pyim-fuzzy-pinyin-alist
   '())
  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  (pyim-page-tooltip 'posframe)
  (pyim-punctuation-translate-p
   '(auto yes no))
  (ivy-re-builders-alist
   '((t . pyim-cregexp-ivy)))
  :config
  (pyim-tsinghua-dict-enable))
#+end_src
* ivy
Config based on: https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :straight t
  :after ivy
  :general
  (my-global-leader
    ;; run-at-time: https://oremacs.com/2015/07/16/callback-quit/
    ;; makes ivy-occur run after counsel-yank-pop
    ;; This doesn't work: (lambda () (interactive) (counsel-yank-pop) (ivy-occur))
    "c y" '(lambda () (interactive) (run-at-time nil nil #'ivy-occur) (counsel-yank-pop)))
  :config
  (counsel-mode))

(use-package ivy
  :straight t
  :after flx
  :diminish
  :bind (("C-c C-r" . ivy-resume)
         ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  (ivy-flx-limit 1000)
  :config
  (ivy-mode)
  (define-key ivy-minibuffer-map (kbd "<C-return>") 'ivy-immediate-done))

(use-package swiper
  :straight t
  :after ivy
  :bind (("C-s" . swiper)))
;; https://www.reddit.com/r/emacs/comments/3xzas3/help_with_ivycounsel_fuzzy_matching_and_sorting/
;; Need to install flx to make sure counsel-M-x would do what I mean
(use-package flx
  :straight t
  :ensure t)
#+end_src
* Testing
** ejc-sql
:LOGBOOK:
CLOCK: [2021-03-11 Thu 11:44]--[2021-03-11 Thu 14:24] =>  2:40
:END:
#+begin_src emacs-lisp :tangle no
(require 'ejc-sql)
#+end_src
** sqlformat
#+begin_src emacs-lisp :tangle yes
(use-package sqlformat
	:straight  (:host github :repo "purcell/sqlformat" :files ("*.el")))

(setq sqlformat-command 'sqlfluff)
(setq sqlformat-args '("--dialect" "snowflake"))
(add-hook 'sql-mode-hook 'sqlformat-on-save-mode)

#+end_src
** org agenda view customisation
:LOGBOOK:
CLOCK: [2021-01-16 Sat 07:50]--[2021-01-16 Sat 07:56] =>  0:06
CLOCK: [2021-01-15 Fri 22:03]--[2021-01-15 Fri 22:18] =>  0:15
CLOCK: [2021-01-15 Fri 18:49]--[2021-01-15 Fri 19:49] =>  1:00
CLOCK: [2021-01-15 Fri 18:36]--[2021-01-15 Fri 18:41] =>  0:05
CLOCK: [2021-01-14 Thu 20:27]--[2021-01-14 Thu 20:33] =>  0:06
:END:
[[https://github.com/jethrokuan/.emacs.d/blob/master/init.el][github repo]]
See also [[https://orgmode.org/worg/doc.html][Documentation for Org hooks, commands and options]]
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s%-6:c% e")
                                 (todo . " %i %-12:c% b")
                                 (tags . " %i %-12:c% b")
                                 (search . " %i %-12:c")))
(setq org-agenda-block-separator nil)
(setq org-agenda-start-with-log-mode t)
(setq yaoni/org-agenda-todo-view
      `("y" "Agenda"
        ((agenda ""
                 ((org-agenda-span 'day)
                  (org-deadline-warning-days 365)
                  (org-agenda-sorting-strategy '(time-up))))
         (todo "TODO"
               ((org-agenda-overriding-header "To Refile")
                (org-agenda-files '(,org-default-notes-file))))

         ;; (todo "TODO"
         ;;       ((org-agenda-overriding-header "Emails")
         ;;        (org-agenda-files '(,(concat jethro/org-agenda-directory "emails.org")))))
         (todo "NEXT"
               ((org-agenda-overriding-header "In Progress")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "^[^\.].*\.org$"))))
         ;; don't show HOLD and DONE
         (tags-todo "+@qut-TODO=\"HOLD\"-TODO=\"DONE\""
                    ((org-agenda-overriding-header "QUT")
                     ;; "^[^\.].*\.org$" ignores Emacs backup files.
                     (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "QUT.org$"))))
         (tags-todo "@customology"
                    ((org-agenda-overriding-header "Customology")
                     ;; "^[^\.].*\.org$" ignores Emacs backup files.
                     (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "Customology.org$"))))
         (todo "TODO"
               ((org-agenda-overriding-header "Company")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "Easytex.org$"))))
         (tags-todo "once"
                    ((org-agenda-overriding-header "One-off Tasks")
                     (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "^[^\.].*\.org$"))))
         (tags-todo "repeater"
                    ((org-agenda-overriding-header "Repeaters")
                     (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "^[^\.].*\.org$"))))
         (todo "TODO"
               ((org-agenda-overriding-header "Personal")
                (org-agenda-files (directory-files-recursively (concat org-directory "/brain") "Personal.org$"))
                ))
         nil)
        ((org-agenda-sorting-strategy '(priority-down todo-state-up alpha-up)))))
(setq org-agenda-custom-commands ())
(add-to-list 'org-agenda-custom-commands `,yaoni/org-agenda-todo-view)
#+end_src

*** DONE set number of spaces between item and tags in org-agenda-view
SCHEDULED: <2021-01-14 Thu>
:PROPERTIES:
:ID:       8d883d08-421c-4f7a-b9e2-49ed78ae2f42
:END:
:LOGBOOK:
CLOCK: [2021-01-14 Thu 10:22]--[2021-01-14 Thu 10:45] =>  0:23
:END:
#+begin_src emacs-lisp :tangle yes
;; left align tags in org-agenda view
(setq org-agenda-tags-column 0)
#+end_src
** org tags
[[https://orgmode.org/manual/Setting-Tags.html][Setting Tags (The Org Manual)]]
#+begin_src emacs-lisp :tangle yes
(setq org-tag-alist (quote (("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            ("@qut" . ?q)
                            ("@customology" . ?c)
                            (:newline)
                            ("WAITING" . ?w)
                            ("HOLD" . ?H)
                            ("CANCELLED" . ?C)
                            (:newline)
                            ("repeater" . ?r)
                            ("once" . ?O))))
#+end_src
** org todo keywords
#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
#+end_src
** org gcal
:LOGBOOK:
CLOCK: [2021-01-14 Thu 21:46]--[2021-01-14 Thu 22:17] =>  0:31
:END:
** autosave all org buffers after clocking in org agenda view
:LOGBOOK:
CLOCK: [2021-01-15 Fri 22:23]--[2021-01-15 Fri 22:24] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
(advice-add 'org-agenda-clock-in :after 'org-save-all-org-buffers)
(advice-add 'org-agenda-clock-out :after 'org-save-all-org-buffers)
#+end_src
** casease
:LOGBOOK:
CLOCK: [2022-01-20 Thu 15:00]--[2022-01-20 Thu 15:21] =>  0:21
CLOCK: [2022-01-20 Thu 14:02]--[2022-01-20 Thu 14:09] =>  0:07
CLOCK: [2022-01-20 Thu 09:23]--[2022-01-20 Thu 09:41] =>  0:18
CLOCK: [2021-02-21 Sun 22:07]--[2021-02-21 Sun 22:08] =>  0:01
CLOCK: [2021-02-21 Sun 21:51]--[2021-02-21 Sun 22:05] =>  0:14
:END:
#+begin_src emacs-lisp :tangle yes
(use-package casease
  :straight (:host github :repo "DogLooksGood/casease" :branch "master" :files ("*.el" "out"))
  :config
  (casease-setup
   :hook python-mode-hook
   ;; use comma to input underscore
   ;; as it's not used in python variables
   :separator ?-
   :entries
   ;; ugh spent so much time on this because I didn't notice I used the wrong
   ;; regex [a-z][0-9], which means alphabet followed by number
   ((snake "[a-z0-9]")))
  (casease-setup
   :hook terraform-mode-hook
   :separator ?,
   :entries
   ;; ugh spent so much time on this because I didn't notice I used the wrong
   ;; regex [a-z][0-9], which means alphabet followed by number
   ((snake "[a-z0-9]"))))
;;; hook will be setup, re-run after changing rules or separator
#+end_src
** org-jekyll
:LOGBOOK:
CLOCK: [2022-05-21 Sat 16:16]--[2022-05-21 Sat 16:44] =>  0:28
CLOCK: [2022-05-21 Sat 14:27]--[2022-05-21 Sat 15:16] =>  0:49
CLOCK: [2022-05-21 Sat 13:36]--[2022-05-21 Sat 13:48] =>  0:12
CLOCK: [2022-03-17 Thu 21:23]--[2022-03-17 Thu 21:48] =>  0:25
CLOCK: [2022-03-16 Wed 20:37]--[2022-03-16 Wed 21:37] =>  1:00
CLOCK: [2022-02-24 Thu 19:51]--[2022-02-24 Thu 20:50] =>  0:59
CLOCK: [2022-02-24 Thu 19:15]--[2022-02-24 Thu 19:51] =>  0:36
CLOCK: [2022-01-23 Sun 20:03]--[2022-01-23 Sun 20:18] =>  0:15
CLOCK: [2022-01-05 Wed 21:15]--[2022-01-05 Wed 21:15] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-publish-project-alist
      `(("yatsky.github.io"
         ;; Path to org files.
         :base-directory ,(concat (file-name-as-directory (get-wd)) "orgs")
         :base-extension "org"
         ;; :base-extension "gpg"
         ;; Path to Jekyll Posts
         :publishing-directory ,(concat (file-name-as-directory (get-wd)) "yatsky.github.io/_posts")
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :html-extension "html"
         :body-only t
         :html-head nil
         :html-head-include-default-style nil
         :with-toc nil ;; ignore toc as it'll break jekyll front matter
         :exclude "Customology.org"
         ;; only include files with tag blog
         :include-file-tags "blog")

        ("images"
         :base-directory ,(concat (file-name-as-directory (get-wd)) "orgs/images")
         :base-extension "png\\|jpg\\|gif\\|jpeg"
         :publishing-directory ,(concat (file-name-as-directory (get-wd)) "yatsky.github.io/assets/images")
         :publishing-function org-publish-attachment)
        ("blog" :components ("yatsky.github.io"
                             "images"))))

(setq org-export-with-broken-links 'mark)

(defun get-org-buffer-title ()
  "Get the title of the current org buffer from #+title."
  (with-current-buffer (current-buffer)
    (let ((ast (org-element-parse-buffer 'greater-element)))
      (org-element-map ast '(keyword)

        (lambda(kw) (plist-get (cadr kw) :value))
        nil
        t))))

(defun get-org-excerpt ()
  "Get the first paragraph of the current org buffer to be used as the excerpt."
  (with-current-buffer (current-buffer)
    (let ((ast (org-element-parse-buffer 'greater-element)))
      (org-element-map ast '(paragraph)

        (lambda(para) (buffer-substring-no-properties (plist-get (cadr para) :begin) (plist-get (cadr para) :end)))
        nil
        t))))

(defun add-post-frontmatter (backend)
  "BACKEND is the export back-end being used, as a symbol."
  ;; Use `equal' instead of `org-export-derived-backend-p'
  ;; because we only want to check for html, not any derived backend.
  (if (equal backend 'html)
      ;; don't care about errors when exporting a subtree of the org file
      (ignore-errors
        (with-current-buffer (current-buffer)
          (goto-char (re-search-forward ":END:"))
          (insert (concat "\n#+begin_export html\n---\nlayout: post\ntitle: \""
		          (get-org-buffer-title)
		          "\"\nexcerpt: "
		          "\""
		          (get-org-excerpt)
		          "\""
		          "\nmodified_date: "
		          (format-time-string "%Y-%m-%d-%H:%M")
		          "\n---\n#+end_export\n"))))))

(add-hook 'org-export-before-parsing-hook #'add-post-frontmatter)

(defun fix-post-link (org-fn dst-fn)
  "Fix the post link in `DST-FN'."
  (with-temp-buffer
    (insert-file-contents dst-fn)
    ;; Fix post link
    ;; two pass
    (while (re-search-forward "\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)-" nil t)
      (replace-match "\\1/\\2/\\3/"))
    (goto-char (point-min))
    (while (re-search-forward "href=\\([^org].*?\\)>" nil t)
      ;; ignore org internal links
      (if (not (string-match-p ".*#org.*" (match-string 0)))
          (replace-match "href={{ \\1 | absolute_url }}>")))

    ;; Fix image link
    (goto-char (point-min))
    (while (re-search-forward "img src=\"\\(.*?\\)\"" nil t)
      (replace-match "img src={{ \"assets/\\1\" || absolute_url }}"))

    (when (file-writable-p dst-fn)
      (write-region (point-min)
                    (point-max)
                    dst-fn))))

(add-hook 'org-publish-after-publishing-hook #'fix-post-link)
#+end_src
** jira
#+begin_src emacs-lisp :tangle yes
(use-package ox-jira
  :straight t)
#+end_src
** org check dependant task state
#+begin_src emacs-lisp :tangle no
(defun check-dependant-task-state (args)
  "Check if the dependant task has been completed (DONE)."
  (message "%s" args)
  (let* ((to (plist-get args :to))
     (depend-id (org-element-property :DEPEND_ID (org-element-at-point)))
     (depend-task-state (when (and depend-id
                       (not (string= depend-id "")))
                  (save-excursion
                (goto-char (org-find-entry-with-id depend-id))
                (nth 2 (org-heading-components))))))
    (or (not (string= to "DONE"))
    (not depend-task-state)
    (member depend-task-state '("DONE")))))

(add-hook 'org-blocker-hook #'check-dependant-task-state)
#+end_src
*** TODO task 1
:PROPERTIES:
:ID:       34EC5057-72D1-4D60-8CAD-DDB467C48F20
:END:
*** NEXT task 2
:PROPERTIES:
:DEPEND_ID: 34EC5057-72D1-4D60-8CAD-DDB467C48F20
:END:
** project
#+begin_src emacs-lisp :tangle yes
(use-package project
  :straight t)
#+end_src

* Programming aids
** Company-mode
:LOGBOOK:
CLOCK: [2022-06-25 Sat 20:47]--[2022-06-25 Sat 21:15] =>  0:28
:END:
#+begin_src emacs-lisp :tangle yes
(use-package company
  :straight t
  :config
  (add-hook 'org-mode-hook (lambda () (company-mode 1))))

(use-package company-quickhelp
  :defer t
  :straight t
  :after company
  :config
  (company-quickhelp-mode 1)
  (eval-after-load 'company
    '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)))

(use-package company-tabnine
  :straight t
  :init
  (add-to-list 'company-backends #'company-tabnine))
#+end_src
** Yasnippet
:LOGBOOK:
CLOCK: [2022-01-20 Thu 11:44]--[2022-01-20 Thu 11:48] =>  0:04
:END:
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :straight t
  :init
  (setq yas-snippet-dirs '("~/.emacs.d/yas-snippets"))
  :config
  (yas-global-mode 1)
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+end_src
** Flycheck
:LOGBOOK:
CLOCK: [2022-01-20 Thu 11:58]--[2022-01-20 Thu 12:00] =>  0:02
CLOCK: [2022-01-20 Thu 10:11]--[2022-01-20 Thu 10:32] =>  0:21
:END:
Virtual env support seems to be out of the box.
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :straight t)
#+end_src
** Jedi
#+begin_src emacs-lisp :tangle yes
;; jedi
; (add-hook 'python-mode-hook 'jedi:setup)
; (setq jedi:complete-on-dot t)    ; ptional
; (setq ac-max-width 0.4)
#+end_src
** realgud
:LOGBOOK:
CLOCK: [2022-02-06 Sun 19:46]--[2022-02-06 Sun 19:51] =>  0:05
:END:
Python debugger.
#+begin_src emacs-lisp :tangle yes
(use-package realgud
  :straight t)
#+end_src
** Blacken
#+begin_src emacs-lisp :tangle yes
(use-package blacken
  :straight t
  :config
  (setq blacken-skip-string-normalization t))
#+end_src
** Typescript
#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :straight  (:host github :repo "emacs-typescript/typescript.el" :files ("*.el" "out"))
  :init
  (setq typescript-indent-level 2)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode)))

(use-package prettier-js
  :straight  (:host github :repo "prettier/prettier-emacs" :files ("*.el" "out"))
  :config
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode))

(use-package add-node-modules-path
  :straight  (:host github :repo "codesuki/add-node-modules-path" :files ("*.el" "out"))
  :config
  (add-hook 'typescript-mode-hook 'add-node-modules-path))

(use-package js2-mode
  :straight t)
#+end_src

#+begin_src emacs-lisp :tangle no
;; tide for TypeScript
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1)

  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src
** Web-mode
:LOGBOOK:
CLOCK: [2022-11-21 Mon 20:30]--[2022-11-21 Mon 20:37] =>  0:07
:END:
#+begin_src emacs-lisp :tangle yes
;; (defun my-web-mode-hook ()
;;   (when (string-equal "tsx" (file-name-extension buffer-file-name))
;;     (setup-tide-mode))
;;   (message "Web-mode on"))

;; (add-hook 'web-mode-hook 'my-web-mode-hook)
(use-package web-mode
  :straight t
  :init
  ;; https://emacs.stackexchange.com/a/33249/24363
  ;; With the default HTML mode as of Emacs 24.4,
  ;; you can get the same behavior as Sublime Text
  ;; (automatic insertion of the closing tag if you type </)
  ;; by putting the following line in your init file:
  (setq sgml-quick-keys 'close)
  (setq web-mode-engines-alist
        '(("django"  . "\\.html\\'")))
  ;; (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))

  ;; :hook
  ;; When enabled, editing an opening markup tag automatically updates the closing tag.
  ;; (web-mode . (lambda () (sgml-electric-tag-pair-mode t)))
  )
;; > this is to balance the pairs

#+end_src
** Format code and save-buffer
:LOGBOOK:
CLOCK: [2020-03-25 Wed 17:46]--[2020-03-25 Wed 18:11] =>  0:25
:END:
Before saving buffer, we want to format any code in it if an appropriate formatter is installed.
*** Features
**** Format code before saving buffer
This is the original idea.
**** [2020-03-26 Thu 09:24] To save some time, only scan and format edited sections
*Edited section* refers to a heading whose direct children have been modified.
When in org mode, we save the modified headings in a +temporary buffer+ variable, then before saving the buffer, we use this information to let the ~format-code-before-save-buffer~ function know where to format.
*** Code
:LOGBOOK:
CLOCK: [2022-01-20 Thu 10:33]--[2022-01-20 Thu 10:45] =>  0:12
CLOCK: [2020-03-26 Thu 15:16]--[2020-03-26 Thu 15:16] =>  0:00
CLOCK: [2020-03-26 Thu 14:22]--[2020-03-26 Thu 14:26] =>  0:04
CLOCK: [2020-03-26 Thu 14:06]--[2020-03-26 Thu 14:22] =>  0:16
CLOCK: [2020-03-26 Thu 14:01]--[2020-03-26 Thu 14:01] =>  0:00
CLOCK: [2020-03-26 Thu 13:55]--[2020-03-26 Thu 14:01] =>  0:06
CLOCK: [2020-03-26 Thu 10:53]--[2020-03-26 Thu 12:10] =>  1:17
CLOCK: [2020-03-26 Thu 09:25]--[2020-03-26 Thu 10:32] =>  1:07
:END:
#+begin_src emacs-lisp :tangle yes
(defun store-org-edited-headings ()
  "Store edited org headings in current buffer."
  ;; Add (org-get-heading) in case we modify text before all headings
  ;; which will make (org-heading-components) throw an exception.
  (if (and (eq major-mode 'org-mode) (org-get-heading))
      (let ((heading (nth 4 (org-heading-components))))
        (if (member heading yaoni-org-edited-headings)
            (message "Already in edited headings")
          (setq-local yaoni-org-edited-headings
                      (push heading yaoni-org-edited-headings))))))


(defun yaoni-format-code-org-setup ()
  "Setup to be run in org-mode-hook."
  (setq-local yaoni-org-edited-headings ())
  ;; store the heading everytime there's a change
  (add-hook 'evil-insert-state-exit-hook 'store-org-edited-headings))

(add-hook 'org-mode-hook 'yaoni-format-code-org-setup)

;; Format code here
(defun yaoni-org-format-code-under-heading (heading)
  "Format code under HEADING in org buffer."
  (save-excursion
    ;; Quick error handling
    (condition-case nil
        (progn
          (forward-line)
          (search-backward heading)
          (org-mark-subtree)
          (indent-region (region-beginning) (region-end)))
      (error nil))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun format-code-before-save-buffer ()
  "Format code and then save buffer."
  (interactive)
  (cond ((eq major-mode 'org-mode)
         ;; (mapc 'yaoni-org-format-code-under-heading yaoni-org-edited-headings)
         (setq-local yaoni-org-edited-headings (list)))
        ((eq major-mode 'python-mode) (let ((saved-position (point)))
                                        (blacken-buffer)
                                        (goto-char saved-position)))))
(add-hook 'before-save-hook #'format-code-before-save-buffer)
#+end_src
** Project-Org entry jump
:LOGBOOK:
CLOCK: [2020-03-25 Wed 20:39]--[2020-03-25 Wed 21:01] =>  0:22
:END:
用 Emacs 写代码的时候总是会经常需要在工程文件夹和对应的 org 文件之间来回切换​。之前一直用的都是最古老的 `switch-buffer` 命令，每次都需要手动在一个列表里面找到需要跳转的 buffer，于是想到把这步省去，能够快速的跳转到当前 buffer 对应的工程或是 org​ buffer。

#+BEGIN_SRC ditaa :file project-org-jump.png :cmdline -r -s 2
+-----------------+           +-----------------+
|                 |           |                 |
|                 |  jump to  |                 |
|  org buffer     |---------->|  project        |
|                 |  jump back|  directory      |
|                 |<----------|                 |
|                 |           |                 |
|                 |           |                 |
+-----------------+           +-----------------+
#+END_SRC

#+RESULTS:
[[file:project-org-jump.png]]

最基本的想法就是，在工程目录下放一个 org-entry，里面记录对应的 org 文件的名称（我的 org 文件都在同一目录下，所以只需要名称即可）。
在 org 文件中对应的 entry 下面加上一个 LOCATION 属性，用来记录对应的工程路径。
这样设置好后，可以用下面的代码实现快速跳转。
*** Open project from entry location
#+begin_src emacs-lisp :tangle yes
(defun open-project-from-entry-location ()
  "Open project, at LOCATION property in org, in Dired."
  (interactive)
  ;; let is a special form that does not need the single quote
  (let ((file-location (org-entry-get (point) "LOCATION" t)))
    (if file-location
        (find-file file-location)
      ;; else
      (message "File location is not present."))))
#+end_src
*** Open project org file from project
#+begin_src emacs-lisp :tangle yes
(defun open-org-file-from-project ()
  "Open project-related org file from project."
  (interactive)
  (let ((file-location (concat
                        org-directory
                        (file-name-as-directory 
                         (with-temp-buffer
                           (insert-file-contents
                            (concat
                             (locate-dominating-file default-directory "org-entry")
                             "/org-entry"))
                           (buffer-string)))))
        (if (file-exists-p file-location)
            (find-file file-location)
          ;; else
          (message "org-entry is not present.")
          ))))
#+end_src
*** Keymap
#+begin_src emacs-lisp :tangle yes
(defun org-project-jump ()
  "A wrapper function to jump between a project and its org file.
`open-project-from-entry-location' and `open-org-file-from-project'.
"
  (interactive)
  (if (eq major-mode 'org-mode)
      (open-project-from-entry-location)
    (open-org-file-from-project)))
;; 快捷键设置，我用的是 general.el
(yaoni-org-leader-def
  :states 'normal
  :keymaps 'override
  "j" 'org-project-jump
  )
#+end_src
*** Demo
[[file:./project-org-jump-demo.gif]]
** copy lines matching regex
:LOGBOOK:
CLOCK: [2021-12-05 Sun 15:22]--[2021-12-05 Sun 15:34] =>  0:12
:END:
https://stackoverflow.com/questions/2289883/emacs-copy-matching-lines
#+begin_src elisp :tangle yes
(defun copy-lines-matching-re (re)
  "find all lines matching the regexp RE in the current buffer
putting the matching lines in a buffer named *matching*"
  (interactive "sRegexp to match: ")
  (let ((result-buffer (get-buffer-create "*matching*")))
    (with-current-buffer result-buffer
      (erase-buffer))
    (save-match-data
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (princ (buffer-substring-no-properties (line-beginning-position)
                                                 (line-beginning-position 2))
                 result-buffer))))
    (pop-to-buffer result-buffer)))
#+end_src
** lsp-mode
:LOGBOOK:
CLOCK: [2021-05-08 Sat 15:58]--[2021-05-08 Sat 16:39] =>  0:41
CLOCK: [2021-05-08 Sat 15:37]--[2021-05-08 Sat 15:58] =>  0:21
:END:
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :straight t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-file-watch-threshold 1000)
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (nxml-mode . lsp)
         (terraform-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration)
         (lsp-mode . (lambda () (company-mode -1))))
  :commands lsp)

;; optionally
(use-package lsp-ui
  :straight t
  :commands lsp-ui-mode)
#+end_src
** Clover
:LOGBOOK:
CLOCK: [2022-02-04 Fri 20:07]--[2022-02-04 Fri 20:09] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
(use-package ctl-mode
  :straight (:host github :repo "yatsky/ctl-mode" :branch "master" :files ("*.el" "out")))
#+end_src
** uuid generator
:LOGBOOK:
CLOCK: [2022-04-02 Sat 15:42]--[2022-04-02 Sat 15:48] =>  0:06
:END:
#+begin_src emacs-lisp :tangle yes
;; see: https://emacs.stackexchange.com/questions/24470/warning-yasnippet-modified-buffer-in-a-backquote-expression
;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
(defun insert-random-uuid ()
  "Insert a UUID.
This commands calls “uuidgen” on MacOS, Linux, and calls PowelShell on Microsoft Windows.
URL `http://ergoemacs.org/emacs/elisp_generate_uuid.html'
Version 2020-06-04"
  (interactive)
  (insert
   (replace-regexp-in-string "\n" ""
                             (cond ((string-equal system-type "windows-nt")
                                    (shell-command-to-string "pwsh.exe -Command [guid]::NewGuid().toString()" t))
                                   ((string-equal system-type "darwin") ; Mac
                                    (shell-command-to-string "uuidgen"))
                                   ((string-equal system-type "gnu/linux")
                                    (shell-command-to-string "uuidgen"))
                                   (t
                                    ;; code here by Christopher Wellons, 2011-11-18.
                                    ;; and editted Hideki Saito further to generate all valid variants for "N" in xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx format.
                                    (let ((myStr (md5
						  (format "%s%s%s%s%s%s%s%s%s%s"
                                                          (user-uid)
                                                          (emacs-pid)
                                                          (system-name)
                                                          (user-full-name)
                                                          (current-time)
                                                          (emacs-uptime)
                                                          (garbage-collect)
                                                          (buffer-string)
                                                          (random)
                                                          (recent-keys)))))
                                      (format "%s-%s-4%s-%s%s-%s"
                                              (substring myStr 0 8)
                                              (substring myStr 8 12)
                                              (substring myStr 13 16)
                                              (format "%x" (+ 8 (random 4)))
                                              (substring myStr 17 20)
                                              (substring myStr 20 32))))))))
#+end_src
** wucuo
:LOGBOOK:
CLOCK: [2022-01-25 Tue 16:29]--[2022-01-25 Tue 16:33] =>  0:04
CLOCK: [2022-01-25 Tue 15:40]--[2022-01-25 Tue 15:55] =>  0:15
CLOCK: [2022-01-20 Thu 15:34]--[2022-01-20 Thu 15:34] =>  0:00
CLOCK: [2022-01-20 Thu 13:43]--[2022-01-20 Thu 14:00] =>  0:17
:END:
First install Aspell with Homebrew.
#+begin_src emacs-lisp :tangle yes
(defun add-word-to-aspell-list ()
  "Add word at point to .aspell.en.pws"
  (interactive)
  (let (pos1 pos2 bds)
	(if (use-region-p)
		(setq pos1 (region-beginning) pos2 (region-end))
	  (progn
		(setq bds (bounds-of-thing-at-point 'word))
		(setq pos1 (car bds) pos2 (cdr bds))))
	(append-to-file
	 (concat (buffer-substring pos1 pos2) "\n") nil "~/.aspell.en.pws")))

(defun yaoni/wucuo-maybe-start()
  "Check the size of the buffer to see if we should start wucuo."
  (if (< (buffer-size) 100000)
      (wucuo-start)
    (wucuo-stop)))
(use-package wucuo
  :straight t
  :init
  (add-hook 'prog-mode-hook #'yaoni/wucuo-maybe-start)
  (add-hook 'text-mode-hook #'yaoni/wucuo-maybe-start)
  (setq ispell-program-name "aspell")
  ;; You could add extra option "--camel-case" for camel case code spell checking if Aspell 0.60.8+ is installed
  ;; @see https://github.com/redguardtoo/emacs.d/issues/796
  (setq ispell-extra-args `("--sug-mode=ultra"
                            "--lang=en_US"
                            "--run-together"
                            "--run-together-limit=16"
                            ,(if (string-match "6.\.[89]" (shell-command-to-string "aspell --versioin")) "--camel-case" "")))
  (my-global-leader
    "wc" 'wucuo-spell-check-visible-region
	"wa" 'add-word-to-aspell-list))
#+end_src
** lisp
:LOGBOOK:
CLOCK: [2022-05-21 Sat 22:18]--[2022-05-21 Sat 22:25] =>  0:07
CLOCK: [2022-01-26 Wed 12:45]--[2022-01-26 Wed 13:05] =>  0:20
CLOCK: [2022-01-25 Tue 19:57]--[2022-01-25 Tue 20:09] =>  0:12
CLOCK: [2022-01-25 Tue 17:03]--[2022-01-25 Tue 17:03] =>  0:00
CLOCK: [2022-01-25 Tue 16:50]--[2022-01-25 Tue 16:55] =>  0:05
CLOCK: [2022-01-25 Tue 16:35]--[2022-01-25 Tue 16:50] =>  0:15
:END:
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :straight t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Indentation
#+begin_src emacs-lisp :tangle yes
(use-package aggressive-indent
  :straight t
  :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
** brackets and quotes
quote lines
#+begin_src emacs-lisp :tangle yes
(defun xah-get-bounds-of-block-or-region ()
  "If region is active, return its boundary, else same as `xah-get-bounds-of-block'.
Version: 2021-08-12"
  (if (region-active-p)
      (cons (region-beginning) (region-end))
    (xah-get-bounds-of-block)))
(defun xah-quote-lines (@quoteL @quoteR @sep )
  "Add quotes/brackets and separator (comma) to lines.
Act on current block or selection.

For example,

 cat
 dog
 cow

becomes

 \"cat\",
 \"dog\",
 \"cow\",

or

 (cat)
 (dog)
 (cow)

In lisp code, @quoteL @quoteR @sep are strings.

URL `http://xahlee.info/emacs/emacs/emacs_quote_lines.html'
Version 2020-06-26 2021-07-21 2021-08-15"
  (interactive
   (let (($brackets
          '(
            "\"double\""
            "'single'"
            "(paren)"
            "{brace}"
            "[square]"
            "<greater>"
            "`emacs'"
            "`markdown`"
            "~tilde~"
            "=equal="
            "“curly double”"
            "‘curly single’"
            "‹french angle›"
            "«french double angle»"
            "「corner」"
            "none"
            "other"
            )) $bktChoice $sep $sepChoice $quoteL $quoteR)
     (setq $bktChoice (ido-completing-read "Quote to use:" $brackets ))
     (setq $sepChoice (ido-completing-read "line separator:" '(  "," ";" "none" "other")))
     (cond
      ((string-equal $bktChoice "none")
       (setq $quoteL "" $quoteR "" ))
      ((string-equal $bktChoice "other")
       (let (($x (read-string "Enter 2 chars, for begin/end quote:" )))
         (setq $quoteL (substring-no-properties $x 0 1)
               $quoteR (substring-no-properties $x 1 2))))
      (t (setq $quoteL (substring-no-properties $bktChoice 0 1)
               $quoteR (substring-no-properties $bktChoice -1))))
     (setq $sep
           (cond
            ((string-equal $sepChoice "none") "")
            ((string-equal $sepChoice "other") (read-string "Enter separator:" ))
            (t $sepChoice)))
     (list $quoteL $quoteR $sep)))
  (let ( $p1 $p2 ($quoteL @quoteL) ($quoteR @quoteR) ($sep @sep))
    (let (($bds (xah-get-bounds-of-block-or-region))) (setq $p1 (car $bds) $p2 (cdr $bds)))
    (save-excursion
      (save-restriction
        (narrow-to-region $p1 $p2)
        (goto-char (point-min))
        (catch 'EndReached
          (while t
            (skip-chars-forward "\t ")
            (insert $quoteL)
            (end-of-line )
            (insert $quoteR $sep)
            (if (eq (point) (point-max))
                (throw 'EndReached t)
              (forward-char))))))))
#+end_src

Brackets & more quotes
#+begin_src emacs-lisp :tangle yes
(defvar xah-brackets '("“”" "()" "[]" "{}" "<>" "＜＞" "（）" "［］" "｛｝" "⦅⦆" "〚〛" "⦃⦄" "‹›" "«»" "「」" "〈〉" "《》" "【】" "〔〕" "⦗⦘" "『』" "〖〗" "〘〙" "｢｣" "⟦⟧" "⟨⟩" "⟪⟫" "⟮⟯" "⟬⟭" "⌈⌉" "⌊⌋" "⦇⦈" "⦉⦊" "❛❜" "❝❞" "❨❩" "❪❫" "❴❵" "❬❭" "❮❯" "❰❱" "❲❳" "〈〉" "⦑⦒" "⧼⧽" "﹙﹚" "﹛﹜" "﹝﹞" "⁽⁾" "₍₎" "⦋⦌" "⦍⦎" "⦏⦐" "⁅⁆" "⸢⸣" "⸤⸥" "⟅⟆" "⦓⦔" "⦕⦖" "⸦⸧" "⸨⸩" "｟｠")
  "A list of strings, each element is a string of 2 chars, the left bracket and a matching right bracket. Used by `xah-select-text-in-quote' and others.")

(defconst xah-left-brackets
  (mapcar (lambda (x) (substring x 0 1)) xah-brackets)
  "List of left bracket chars. Each element is a string.")

(defconst xah-right-brackets
  (mapcar (lambda (x) (substring x 1 2)) xah-brackets)
  "List of right bracket chars. Each element is a string.")

(defun xah-backward-left-bracket ()
  "Move cursor to the previous occurrence of left bracket.
The list of brackets to jump to is defined by `xah-left-brackets'.
URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
Version 2015-10-01"
  (interactive)
  (re-search-backward (regexp-opt xah-left-brackets) nil t))

(defun xah-forward-right-bracket ()
  "Move cursor to the next occurrence of right bracket.
The list of brackets to jump to is defined by `xah-right-brackets'.
URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
Version 2015-10-01"
  (interactive)
  (re-search-forward (regexp-opt xah-right-brackets) nil t))

(defun xah-forward-bracket-smart ()
  "Move cursor to the current or next left bracket.
Copy of `xah-forward-quote-smart'."
  (interactive)
  (let (($pos (point)))
    (if (nth 3 (syntax-ppss))
        (progn
          (backward-up-list 1 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)
          (forward-sexp)
          (re-search-forward "(" nil t))
      (progn (re-search-forward "(" nil t)))
    (when (<= (point) $pos)
      (progn (re-search-forward "(" nil t)))))


;; quotes
(defun xah-forward-quote-smart ()
  "Move cursor to the current or next string quote.
Place cursor at the position after the left quote.
Repeated call will find the next string.
URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
Version 2016-11-22"
  (interactive)
  (let (($pos (point)))
    (if (nth 3 (syntax-ppss))
        (progn
          (backward-up-list 1 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)
          (forward-sexp)
          (re-search-forward "\\\"\\\|'" nil t))
      (progn (re-search-forward "\\\"\\\|'" nil t)))
    (when (<= (point) $pos)
      (progn (re-search-forward "\\\"\\\|'" nil t)))))

(defun xah-backward-quote ()
  "Move cursor to the previous occurrence of \".
If there are consecutive quotes of the same char, keep moving until none.
Returns `t' if found, else `nil'.
URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
Version 2016-07-23"
  (interactive)
  (if (re-search-backward "\\\"+\\\|'" nil t)
      (when (char-before) ; isn't nil, at beginning of buffer
        (while (char-equal (char-before) (char-after))
          (left-char)
          t))
    (progn
      (message "No more quotes before cursor.")
      nil)))
#+end_src
** wgrep
#+begin_src emacs-lisp :tangle yes
(use-package wgrep
  :straight t)
#+end_src
** grammatical-edit
:LOGBOOK:
CLOCK: [2022-05-21 Sat 22:14]--[2022-05-21 Sat 22:17] =>  0:03
CLOCK: [2022-04-24 Sun 23:43]--[2022-04-24 Sun 23:53] =>  0:10
CLOCK: [2022-04-24 Sun 23:24]--[2022-04-24 Sun 23:32] =>  0:08
CLOCK: [2022-03-22 Tue 21:52]--[2022-03-22 Tue 22:15] =>  0:23
:END:
#+begin_src emacs-lisp :tangle yes
(use-package tree-sitter
  :straight t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(use-package tree-sitter-langs
  :straight t)
(use-package grammatical-edit
  :straight (:host github :repo "manateelazycat/grammatical-edit" :brnach main)
  :after tree-sitter
  :config
  (dolist (hook (list
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'css-mode-hook
                 'minibuffer-inactive-mode-hook))
    (add-hook hook '(lambda () (grammatical-edit-mode 1)))))
(grammatical-edit-leader
  "\"" 'grammatical-edit-double-quote
  "k" 'grammatical-edit-kill
  "e \"" 'grammatical-edit-wrap-double-quote
  "e '" 'grammatical-edit-wrap-single-quote
  "e [" 'grammatical-edit-wrap-bracket
  "e {" 'grammatical-edit-wrap-curly
  "e (" 'grammatical-edit-wrap-round
  "e )" 'grammatical-edit-unwrap
  "r" 'grammatical-edit-jump-right
  "l" 'grammatical-edit-jump-left
  "n" 'grammatical-edit-jump-out-pair-and-newline
  "u" 'grammatical-edit-jump-up)
#+end_src
** avy
#+begin_src emacs-lisp :tangle yes
(use-package avy
  :straight t)

#+end_src
** thing at point
:LOGBOOK:
CLOCK: [2022-11-19 Sat 12:22]--[2022-11-19 Sat 12:46] =>  0:24
CLOCK: [2022-06-25 Sat 19:53]--[2022-06-25 Sat 19:58] =>  0:05
CLOCK: [2022-06-25 Sat 19:35]--[2022-06-25 Sat 19:51] =>  0:16
CLOCK: [2022-06-25 Sat 12:19]--[2022-06-25 Sat 12:55] =>  0:36
CLOCK: [2022-04-27 Wed 20:48]--[2022-04-27 Wed 21:00] =>  0:12
CLOCK: [2022-04-27 Wed 20:30]--[2022-04-27 Wed 20:48] =>  0:18
:END:
#+begin_src emacs-lisp :tangle yes
(require 'tree-sitter)

(defun yaoni/python-mark-node ()
  "Use tree-sitter to get the thing at point more accurately."
  (let* ((node (tree-sitter-node-at-pos))
	 (start-pos (tsc-node-start-position node))
	 (end-pos (tsc-node-end-position node)))
    (cons start-pos end-pos)))

(defun yaoni/org-mark-node ()
  "Remove tilde (~) surrounding code snippet if cursor is not in org src block."
  (let ((bnds (bounds-of-thing-at-point 'symbol)))
    (cond ((org-in-src-block-p) bnds)
          (t
           (let ((start (car bnds))
                 (end (cdr bnds)))
             (if (and (equal (char-after start) ?~)
                      (equal (char-before end) ?~))
                 (cons (+ start 1) (- end 1))
               bnds))))))

(defun yaoni/base-mark-node ()
  "I only care about symbol at the moment."
  (bounds-of-thing-at-point 'symbol))

(defun yaoni/mark-node ()
  "Mark the current node under cursor using tree-sitter."
  (interactive)
  (let ((bnds (cond
               ((eq major-mode 'python-mode) (yaoni/python-mark-node))
               ((eq major-mode 'org-mode) (yaoni/org-mark-node))
               (t (yaoni/base-mark-node)))))
    (cond ((eq bnds nil)
           (message "Not a valid symbol to be marked. Using `er/expand-region' to mark it.")
           (if (featurep 'expand-region)
               (call-interactively #'er/expand-region)
             (message "`expand-region' is not available. Do nothing")))
          ((not (eq bnds nil))
           (goto-char (car bnds))
           (push-mark (cdr bnds))
           (setq mark-active t))
          (t (message "Something is wrong.")))))

(defun yaoni/copy-node ()
  "Copy the node."
  (interactive)
  (yaoni/mark-node)
  (evil-yank (region-beginning) (region-end))
  (deactivate-mark))

(defun yaoni/kill-node ()
  "Kill the node (put it into kill-ring)."
  (interactive)
  (yaoni/mark-node)
  (kill-region (region-beginning) (region-end))
  (deactivate-mark))

(bind-key ",y" 'yaoni/copy-node 'evil-normal-state-map)
(bind-key ",k" 'yaoni/kill-node 'evil-normal-state-map)

#+end_src
** expand-region
:LOGBOOK:
CLOCK: [2022-06-25 Sat 19:53]--[2022-06-25 Sat 19:53] =>  0:00
:END:
#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :straight t
  :bind ("C-=" . er/expand-region))
#+end_src
** smex
https://github.com/nonsequitur/smex
#+begin_src emacs-lisp :tangle yes
(use-package smex
  :straight t)
#+end_src
** venv
:LOGBOOK:
CLOCK: [2022-06-25 Sat 21:50]--[2022-06-25 Sat 21:51] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
;; virtualenvwrapper
(use-package virtualenvwrapper
  :straight t)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
;; for use with pyenv, pyenv-virtualenv
(setq venv-location "~/.pyenv/versions")
;; note that setting `venv-location` is not necessary if you
;; use the default location (`~/.virtualenvs`), or if the
;; the environment variable `WORKON_HOME` points to the right place
;; (venv-workon "otree-3")

(defun yaoni/venv-workon-advice ()
  "Run this advice after `venv-workon'."
  (if (functionp 'lsp-bridge-restart-process)
      (lsp-bridge-restart-process))
  (if (functionp (blink-search-restart-process))
      (blink-search-restart-process)))

(advice-add 'venv-workon :after #'yaoni/venv-workon-advice)
#+end_src
** hl-line
Highlight current line.
#+begin_src emacs-lisp :tangle yes
(use-package hl-line
  :ensure nil
  :hook (after-init . global-hl-line-mode))
#+end_src
** hideshow
#+begin_src emacs-lisp :tangle yes
;; see: https://github.com/condy0919/emacs-newbie/blob/master/introduction-to-builtin-modes.md
(use-package hideshow
  :ensure nil
  :diminish hs-minor-mode
  :hook (prog-mode . hs-minor-mode)
  :init
  ;; 这里额外启用了 :box t 属性使得提示更加明显
  (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

  (defun hideshow-folded-overlay-fn (ov)
    (when (eq 'code (overlay-get ov 'hs))
      (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
             (info (format " ... #%d " nlines)))
        (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))

  (setq hs-set-up-overlay 'hideshow-folded-overlay-fn)
  ;; record if all blocks are hidden
  (setq hs-all-hidden nil)
  :general
  (evil-normal-state-map "8" 'hs-toggle-hiding)
  (my-global-leader "8" '(lambda ()
                           (interactive)
                           (if hs-all-hidden
                               (progn
                                 (hs-show-all)
                                 (setq hs-all-hidden nil))
                             (progn
                               (hs-hide-all)
                               (setq hs-all-hidden t))))))
;; reactjs
(add-to-list 'hs-special-modes-alist
             ;; hide Tags, {}, and []
             '(js-mode "<[A-Za-z]+[ a-zA-Z=\"]*>\\|{\\|\\["
                       "<[/A-Za-z]+>\\|}\\|\\]"
                       "//"
                       (lambda (&arg)
                         (evilmi-jump-items-internal 1))))
#+end_src
** so-long
Handle extremely long lines gracefully.
#+begin_src emacs-lisp :tangle yes
(use-package so-long
  :ensure nil
  :config (global-so-long-mode 1))
#+end_src
** simple
#+begin_src emacs-lisp :tangle yes
(use-package simple
  :ensure nil
  :hook (after-init . (lambda ()
                        (line-number-mode)
                        (column-number-mode)
						;; size of the file
                        (size-indication-mode))))
#+end_src
** Other
#+begin_src emacs-lisp :tangle yes

(if (version< emacs-version "28")
    (global-undo-tree-mode))


(setq gif-screencast-output-directory (concat org-directory "screencasts"))


(use-package pdf-tools
  :straight t)
;; no point get pdf support in terminal
(if (display-graphic-p)
    (pdf-tools-install))



(defun open-working-directory ()
  (interactive)
  (find-file (get-wd))
  )

(defun open-workspace (&optional ver)
  (interactive)
  (find-file (get-workspace ver))
)

(yaoni-org-leader-def
  :states '(motion normal)
  :keymaps 'override

  "d" 'open-working-directory
  "w" 'open-workspace
  "5" (lambda() (interactive) (open-workspace 5))
)

#+end_src

All the icons to display and show icons.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :straight t)
#+end_src

* emacs-jupyter
#+begin_src emacs-lisp :tangle yes
(use-package jupyter
  :straight (:host github :repo "nnicandro/emacs-jupyter"))
#+end_src
* scimax
:LOGBOOK:
CLOCK: [2022-06-25 Sat 21:52]--[2022-06-25 Sat 22:05] =>  0:13
CLOCK: [2022-03-27 Sun 21:53]--[2022-03-27 Sun 22:05] =>  0:12
:END:
#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :straight t)

(use-package pretty-hydra
  :straight t)

(defun scimax-jupyter-ansi ()
  "Colorize the results block produced by scimax-jupyter."
  (let* ((r (org-babel-where-is-src-block-result))
	 (result (when r
		   (save-excursion
		     (goto-char r)
		     (org-element-context)))))
    (when result
      (ansi-color-apply-on-region (org-element-property :begin result)
				  (org-element-property :end result)))
    t))
(use-package scimax-jupyter
  :straight (:host github :repo "yatsky/scimax")
  :if (executable-find "jupyter")
  :ensure nil
  :init
  (add-to-list 'org-babel-after-execute-hook 'scimax-jupyter-ansi t))
#+end_src
* Use-package
:LOGBOOK:
CLOCK: [2021-01-27 Wed 21:15]--[2021-01-27 Wed 21:31] =>  0:16
CLOCK: [2021-01-27 Wed 21:04]--[2021-01-27 Wed 21:13] =>  0:09
CLOCK: [2021-01-27 Wed 21:02]--[2021-01-27 Wed 21:04] =>  0:02
:END:
* Which-key
#+begin_src elisp :tangle yes
(use-package which-key
  :straight (:host github :repo "justbur/emacs-which-key")
  :config
  (which-key-mode))
#+end_src
* yaml-mode
#+begin_src elisp :tangle yes
(use-package yaml-mode
  :straight t
  :config
  ;; yaml support
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
* Tag navigation
** evil-matchit
Easily jumping between beginning and ending tags.
https://github.com/redguardtoo/evil-matchit
#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :straight t
  :config
;; (require 'evil-matchit)
  (global-evil-matchit-mode 1)
)
(yaoni-tag-leader-def
  :states '(motion normal)
  :keymaps 'override
  "j" 'evilmi-jump-items
)
#+end_src
** nxml
:LOGBOOK:
CLOCK: [2022-12-25 Sun 23:01]--[2022-12-25 Sun 23:36] =>  0:35
CLOCK: [2022-12-25 Sun 23:01]--[2022-12-25 Sun 23:01] =>  0:00
:END:
See: https://lgfang.github.io/mynotes/emacs/emacs-xml.html#sec-8-1 or [[file:../Dev/orgs/20210501214605-xml_on_emacs.org][XML on Emacs]].
#+begin_src emacs-lisp :tangle yes
(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>" ;; regexp for start block
               "-->\\|</[^/>]*[^/]>" ;; regexp for end block
               "<!--"
               nxml-forward-element
               nil))
;; we want to insert tabs for CTL in Clover graphs
(add-hook 'nxml-mode-hook
    (lambda ()
        (setq-default indent-tabs-mode t)
        (setq-default tab-width 4)
		(hs-minor-mode 1)))
#+end_src
* org-plus-contrib
See [[https://github.com/raxod502/straight.el/issues/753][issue]] and [[https://github.com/raxod502/straight.el/commit/9eb2e058665ad1144c66d2b1b816f9effa37907e][commit]].
#+begin_src emacs-lisp :tangle yes
(use-package org-contrib
  :straight t
  :config
  (require 'ox-confluence))
#+end_src
* Updates
:LOGBOOK:
CLOCK: [2022-05-26 Thu 22:21]--[2022-05-26 Thu 23:00] =>  0:39
CLOCK: [2022-03-06 Sun 10:10]--[2022-03-06 Sun 10:19] =>  0:09
CLOCK: [2022-03-05 Sat 23:29]--[2022-03-05 Sat 23:57] =>  0:28
CLOCK: [2022-03-05 Sat 23:07]--[2022-03-05 Sat 23:17] =>  0:10
CLOCK: [2022-03-05 Sat 22:45]--[2022-03-05 Sat 23:07] =>  0:22
CLOCK: [2022-03-05 Sat 22:23]--[2022-03-05 Sat 22:45] =>  0:22
CLOCK: [2022-03-05 Sat 20:22]--[2022-03-05 Sat 22:22] =>  2:00
CLOCK: [2022-02-27 Sun 07:00]--[2022-02-27 Sun 08:35] =>  1:35
CLOCK: [2022-02-26 Sat 21:52]--[2022-02-26 Sat 23:42] =>  1:50
CLOCK: [2022-02-26 Sat 19:02]--[2022-02-26 Sat 19:02] =>  0:00
CLOCK: [2022-02-26 Sat 18:28]--[2022-02-26 Sat 18:59] =>  0:31
CLOCK: [2022-02-26 Sat 17:15]--[2022-02-26 Sat 18:21] =>  1:06
CLOCK: [2022-01-26 Wed 17:27]--[2022-01-26 Wed 17:27] =>  0:00
:END:
** DONE Cleaning up
:LOGBOOK:
CLOCK: [2022-01-26 Wed 17:27]--[2022-01-26 Wed 17:34] =>  0:07
CLOCK: [2020-05-24 Sun 15:25]--[2020-05-24 Sun 15:26] =>  0:01
CLOCK: [2020-05-24 Sun 15:20]--[2020-05-24 Sun 15:24] =>  0:04
CLOCK: [2020-04-29 Wed 09:30]--[2020-04-29 Wed 09:39] =>  0:09
CLOCK: [2020-04-29 Wed 09:02]--[2020-04-29 Wed 09:11] =>  0:09
:END:

* Aesthetics
To get the text property of ~#+begin_src emacs-lisp :tangle yes~, use ~describe-char~ on any character below or ~what-cursor-position~ with any character from the line as argument (~C-u C-x =~).

#+begin_src emacs-lisp :tangle yes
(defun get-current-hour-as-int (time-string)
  "Get the current hour from `TIME-STRING'.
Example: Sat Feb 26 22:03:50 2022 and get 22."
  (string-to-number (nth 0 (split-string (nth 3 (split-string time-string)) ":"))))

(defun yaoni/enable-theme ()
  "Disable all themes in `custom-enabled-themes' and load a single theme.
`THEME' is the theme you want to enable."
  (interactive)
  (let (theme
        (intern
         (ivy-completing-read
          "Choose a theme to enable:"
          custom-known-themes
          nil t "")))
    (while (length> custom-enabled-themes 0)
      (disable-theme (car custom-enabled-themes)))
    (enable-theme theme)))

(use-package twilight-bright-theme
  :straight (:host github :repo "yatsky/twilight-bright-theme.el"))

(use-package dracula-theme
  :straight (:host github :repo "dracula/emacs"))

(use-package powerline
  :straight t)
;; (powerline-center-evil-theme)

(use-package emojify
  :straight t
  :config
  (global-emojify-mode t)
  (global-emojify-mode-line-mode t))
#+end_src
** Mode line
Mode line customization.
#+begin_src emacs-lisp :tangle yes
;; see: https://emacs.stackexchange.com/questions/3925/hide-list-of-minor-modes-in-mode-line
(defvar hidden-minor-modes ; example, write your own list of hidden
  '(abbrev-mode            ; minor modes
    org-indent-mode
    yas-minor-mode
    evil-org-mode
    eldoc-mode
    undo-tree-mode
    which-key-mode
    visual-line-mode
    auto-revert-mode))

(defun purge-minor-modes ()
  (interactive)
  (dolist (x hidden-minor-modes nil)
    (let ((trg (cdr (assoc x minor-mode-alist))))
      (when trg
        (setcar trg "")))))

(add-hook 'after-change-major-mode-hook 'purge-minor-modes)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq display-time-format "%a %d/%m")
(setq display-time-default-load-average nil)
#+end_src

** shackle
:LOGBOOK:
CLOCK: [2022-05-21 Sat 22:07]--[2022-05-21 Sat 22:09] =>  0:02
CLOCK: [2022-02-24 Thu 18:44]--[2022-02-24 Thu 19:01] =>  0:17
:END:
See: https://depp.brause.cc/shackle/

shackle gives you the means to put an end to popped up buffers not behaving they way you'd like them to. By setting up simple rules you can for instance make Emacs always select help buffers for you or make everything reuse your currently selected window.
#+begin_src emacs-lisp :tangle yes
(use-package shackle
  :straight t
  :config
  (setq shackle-default-size 0.4
        shackle-rules `((help-mode                :select t :align right :size 0.3)
                        ("*Messages*"             :select t :align t)
                        (magit-status-mode        :select t :align right :size 0.3)
                        (ivy-occur-mode        :select t :align right :size 0.3)
                        (special-mode             :align t)
                        (process-menu-mode        :align t)
                        (compilation-mode         :align t)
                        (flycheck-error-list-mode :align t)
                        ("*Shell Command Output*" :align t)
                        ("*Async Shell Command*"  :align t)))
  :config
  (shackle-mode 1))
#+end_src

** beacon
Use beacon to remind yourself where the cursor is at when you scroll cross the window.
#+begin_src emacs-lisp :tangle no
(use-package beacon
  :straight (:host github :repo "Malabarba/beacon")
  :custom
  (beacon-color "#00adb8")
  (beacon-size 80)
  (beacon-blink-delay 0.1)
  :config
  (beacon-mode 1))
#+end_src

** parrot
#+begin_src emacs-lisp :tangle yes
(use-package parrot
  :straight t
  :init
  (setq parrot-animate-parrot t)
  (setq parrot-keep-partying t)
  (setq parrot-spaces-before 2)
  (setq parrot-spaces-after 2)
  (setq parrot-num-rotations nil)
  :config
  (parrot-mode))
#+end_src

** customise theme
:LOGBOOK:
CLOCK: [2022-04-02 Sat 22:15]--[2022-04-02 Sat 22:36] =>  0:21
CLOCK: [2022-04-02 Sat 21:15]--[2022-04-02 Sat 22:12] =>  0:57
:END:
I want to always have a some sort of background for ~org-block-begin-line~ and ~org-block-end-line~.

Reference: https://protesilaos.com/codelog/2020-08-28-notes-emacs-theme-devs/
*** Useful functions
:LOGBOOK:
CLOCK: [2022-04-03 Sun 09:29]--[2022-04-03 Sun 10:12] =>  0:43
:END:
List all faces, using the same sample text in each.
#+begin_src emacs-lisp :tangle no
(list-faces-display)
#+end_src

Set face attribute.
#+begin_src emacs-lisp :tangle no
(set-face-attribute 'cursor nil :background "unspecified")
(set-face-attribute 'cursor nil :background "red")
(dolist (face '(default fixed-pitch))
  (set-face-attibute face nil :backgroun "Monospace"))
#+end_src

Add a hook to theme change.
#+begin_src emacs-lisp :tangle no
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))

(add-hook 'after-load-theme-hook (lambda () (set-face-attribute 'cursor nil :background "red")))
#+end_src

Code to be tangled.
https://www.gnu.org/software/emacs/manual/html_node/elisp/Advice-Combinators.html#Advice-Combinators
#+begin_src emacs-lisp :tangle yes
(defun yaoni/custom-org-block (theme)
  "Customise my org block to make them pop."
  (dolist (face '(org-block-begin-line org-block-end-line))
    (set-face-attribute face nil :overline "#A7A6AA" :foreground "#555555" :background "#E2E1D5"))
  (let ((bg-color
         (cond ((eq theme 'dracula) "#000000")
               ((eq theme 'modus-vivendi) "#543f78")
               (t "#ffffe0"))))
    (set-face-attribute 'org-block nil :background bg-color)))

(defun themeadvice@load-theme (&rest args)
  "Run `after-load-theme-hook'."
  (let ((theme (ad-get-argument args 0)))
    (yaoni/custom-org-block theme)))

(advice-add 'enable-theme :after #'themeadvice@load-theme)

#+end_src

Add a command to easily switch between themes (I couldn't find a command to do this in Emacs).
Can reference [[https://github.com/minad/consult/blob/main/consult.el][consult-theme]] for improvement.
#+begin_src emacs-lisp :tangle yes
(defun switch-theme ()
  "Easily switch theme without manually typing `disable-theme' and `enable-theme'."
  (interactive)
  (let ((cur-theme
   (car custom-enabled-themes))
  (new-theme
   (intern
    (ivy-completing-read
     "Choose a theme to switch to:"
     custom-known-themes
     nil t ""))))
    (disable-theme cur-theme)
    (enable-theme new-theme)))

(my-global-leader
  "s t" 'switch-theme)
#+end_src
** auto-dim-other-buffers
:LOGBOOK:
CLOCK: [2022-06-20 Mon 19:56]--[2022-06-20 Mon 20:07] =>  0:11
:END:
#+begin_src emacs-lisp :tangle yes
(use-package auto-dim-other-buffers
  :straight (:host github :repo "mina86/auto-dim-other-buffers.el" :files ("*.el" "out"))
  :hook (after-init . (lambda ()
			(when (fboundp 'auto-dim-other-buffers-mode)
			  (auto-dim-other-buffers-mode t)))))
#+end_src
** rainbow mode
Show colors under color text codes.
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-mode
    :straight  t)
#+end_src
* os intergration
:LOGBOOK:
CLOCK: [2022-03-06 Sun 22:01]--[2022-03-06 Sun 22:38] =>  0:37
:END:
Allow Emacs to copy to and paste from the GUI clipboard
when running in text terminal.
#+begin_src emacs-lisp :tangle yes
(use-package xclip
  :straight t
  :ensure t
  :init
  (and (is-gnu-linux)
       (not (display-graphic-p))
       (file-directory-p "/mnt/c")
       (setq xclip-method 'powershell))
  :config
  (when
    (not (display-graphic-p))
    (xclip-mode)))
#+end_src

Somehow in Emacs 28 I need to explicitly set this variable because right command defaults to Super.
#+begin_src emacs-lisp :tangle yes
(unless (version< emacs-version "28")
  (setq mac-right-command-modifier 'meta))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package vterm
    :straight t)

#+end_src
** dired
https://xenodium.com/showhide-emacs-dired-details-in-style/
#+begin_src emacs-lisp :tangle yes
(use-package dired
  :hook (dired-mode . dired-hide-details-mode)
  :init
  ;; If non-nil, Dired tries to guess a default target directory.
  ;; This means: if there is a Dired buffer displayed in some window,
  ;; use its current directory, instead of this Dired buffer’s
  ;; current directory.
  (setq dired-dwim-target t)
  ;; h -> human readable
  (setq dired-listing-switches "-alh")
  ;; Dired
  :config
  (use-package dired-x
    :hook
    (dired-mode . (lambda () (dired-omit-mode 1)))
    :config
    (setq dired-omit-files (concat dired-omit-files "|.+~$"))
    ;; buffer-local variable
    (setq-default dired-omit-files-p t))
  ;; Colourful columns.
  (use-package diredfl
    :straight t
    :ensure t
    :config
    (diredfl-global-mode 1))
  (use-package dired-git-info
    :straight t
    :ensure t
    :bind (:map evil-normal-state-map
                (")" . dired-git-info-mode))))
#+end_src
* EAF
:LOGBOOK:
CLOCK: [2023-01-07 Sat 18:59]--[2023-01-07 Sat 19:15] =>  0:16
CLOCK: [2023-01-07 Sat 15:16]--[2023-01-07 Sat 15:52] =>  0:36
CLOCK: [2023-01-05 Thu 15:28]--[2023-01-05 Thu 15:47] =>  0:19
CLOCK: [2022-03-27 Sun 16:13]--[2022-03-27 Sun 16:26] =>  0:13
CLOCK: [2022-03-27 Sun 15:37]--[2022-03-27 Sun 16:06] =>  0:29
:END:
Doesn't really work.
#+begin_src emacs-lisp :tangle yes
(defun yaoni/start-eaf ()
  "Wrapper to start EAF."
  (add-to-list 'load-path ~/.emacs.d/site-lisp/emacs-application-framework/)
  (setq eaf-python-command ~/.pyenv/versions/data310/bin/python)  ; this path needs to be changed based on your OS
  (require 'eaf)
  ;; (require 'eaf-evil)
  ;; (setq eaf-evil-leader-key "SPC")
  ;; (require 'eaf-file-sender)
  ;; (require 'eaf-music-player)
  ;; (require 'eaf-camera)
  ;; (require 'eaf-terminal)
  ;; (require 'eaf-vue-demo)
  (require 'eaf-pdf-viewer)
  ;; (defalias 'browse-web #'eaf-open-browser)
  ;; (require 'eaf-browser)
  ;; (setq browse-url-browser-function 'eaf-open-browser)
  ;; (defalias 'browse-web #'eaf-open-browser)
  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;; (setq eaf-browser-continue-where-left-off t)
  ;; (setq eaf-browser-enable-adblocker t)
  ;; (require 'eaf-markdown-previewer)
  ;; (require 'eaf-file-browser)
  ;; (require 'eaf-mermaid)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-mindmap)
  ;; (require 'eaf-video-player)
  ;; (require 'eaf-org-previewer)
  ;; (require 'eaf-airshare)
  ;; (require 'eaf)
  ;; (require 'eaf-jupyter)
  ;; (require 'eaf-netease-cloud-music)
  ;; (require 'eaf-system-monitor)
  (defun yaoni/eaf-pdf-setup ()
    (display-line-numbers-mode -1)
    (evil-emacs-state 1))
  (add-hook 'eaf-pdf-viewer-hook 'yaoni/eaf-pdf-setup)
  (general-define-key
   :states '(motion visual normal)
   :keymaps '(eaf-pdf-outline-mode-map)
   "RET" 'eaf-pdf-outline-jump)
  )

(if (is-gnu-linux)
    (message "Probably in WSL. Do not start EAF.")
  (yaoni/start-eaf))
#+end_src

See: https://manateelazycat.github.io/linux/ocr/2022/12/19/install-paddocr.html
#+begin_src bash :results output
#!/bin/bash
pip3 uninstall opencv-python
pip3 install opencv-python==4.5.5.64

pip3 uninstall packaging
pip3 install packaging==21.3

# run these separately
# might need to run `brew install swig` for paddleocr
pip3 install common dual tight data prox paddle paddlepaddle paddleocr
# issue with paddleocr
# ERROR: flag 'flagfile' was defined more than once (in files '/Users/grinay/paddleinference/Paddle/build/third_party/gflags/src/extern_gflags/src/gflags.cc' and '/tmp/gflags-20211021-3963-1mi18ai/gflags-2.2.2/src/gflags.cc').

# so I'm using easyocr for the time being
pip install easyocr
#+end_src
* lsp-bridge
:LOGBOOK:
CLOCK: [2022-07-16 Sat 19:50]--[2022-07-16 Sat 20:05] =>  0:15
:END:
#+begin_src emacs-lisp :tangle yes
(use-package f
  :straight t)
(use-package markdown-mode
  :straight t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))

(use-package ox-gfm
  :straight t)
#+end_src
#+begin_src emacs-lisp :tangle yes
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src
#+begin_src emacs-lisp :tangle yes
(use-package lsp-bridge
  :straight (:host github :repo "manateelazycat/lsp-bridge"
                   :files ("*"
                           ("acm" "acm/*")
                           ("core" "core/*")
                           ("langserver" "langserver/*")
                           ("multiserver" "multiserver/*")
                           ("resources" "resources/*")))
  :init
  (bind-key "M-N" 'lsp-bridge-popup-documentation-scroll-up) ;向下滚动文档
  (bind-key "M-P" 'lsp-bridge-popup-documentation-scroll-down) ;向上滚动文档
  :config
  (push '(terraform-mode . "terraform-ls") lsp-bridge-multi-lang-server-mode-list)
  (push 'terraform-mode-hook lsp-bridge-default-mode-hooks)
  (push '(terraform-mode . 2) lsp-bridge-formatting-indent-alist)
  (dolist (hook '(org-mode-hook terraform-mode-hook))
    (setq lsp-bridge-default-mode-hooks
          (remove hook lsp-bridge-default-mode-hooks)))
  (global-lsp-bridge-mode))

#+end_src

* company wordfreq
Reference config here: https://github.com/KaratasFurkan/.emacs.d/issues/1
#+begin_src emacs-lisp :tangle yes
(use-package company-wordfreq
  :straight  (:host github :repo "johannes-mueller/company-wordfreq.el")
  :custom
  (ispell-local-dictionary "english")
  :config
  (add-hook 'text-mode-hook (lambda ()
                              (setq-local company-backends '(company-wordfreq))
                              (setq-local company-transformers nil))))
#+end_src

* dockerfile mode
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :straight t)
#+end_src

* terraform
#+begin_src emacs-lisp :tangle yes
(use-package terraform-mode
    :straight  (:host github :repo "emacsorphanage/terraform-mode" :files ("*.el" "out")))
#+end_src

* modus themes
#+begin_src emacs-lisp :tangle yes
(use-package modus-themes
  :ensure
  :init
  ;; Add all your customizations prior to loading the themes
  
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))
#+end_src

Summertime
#+begin_src emacs-lisp :tangle yes
(setq modus-themes-vivendi-color-overrides
      '((bg-main . "#25152a")
        (bg-dim . "#2a1930")
        (bg-alt . "#382443")
        (bg-hl-line . "#332650")
        (bg-active . "#463358")
        (bg-inactive . "#2d1f3a")
        (bg-active-accent . "#50308f")
        (bg-region . "#5d4a67")
        (bg-region-accent . "#60509f")
        (bg-region-accent-subtle . "#3f285f")
        (bg-header . "#3a2543")
        (bg-tab-active . "#26162f")
        (bg-tab-inactive . "#362647")
        (bg-tab-inactive-accent . "#36265a")
        (bg-tab-inactive-alt . "#3e2f5a")
        (bg-tab-inactive-alt-accent . "#3e2f6f")
        (fg-main . "#debfe0")
        (fg-dim . "#d0b0da")
        (fg-alt . "#ae85af")
        (fg-unfocused . "#8e7f9f")
        (fg-active . "#cfbfef")
        (fg-inactive . "#b0a0c0")
        (fg-docstring . "#c8d9f7")
        (fg-comment-yellow . "#cf9a70")
        (fg-escape-char-construct . "#ff75aa")
        (fg-escape-char-backslash . "#dbab40")
        (bg-special-cold . "#2a3f58")
        (bg-special-faint-cold . "#1e283f")
        (bg-special-mild . "#0f3f31")
        (bg-special-faint-mild . "#0f281f")
        (bg-special-warm . "#44331f")
        (bg-special-faint-warm . "#372213")
        (bg-special-calm . "#4a314f")
        (bg-special-faint-calm . "#3a223f")
        (fg-special-cold . "#c0b0ff")
        (fg-special-mild . "#bfe0cf")
        (fg-special-warm . "#edc0a6")
        (fg-special-calm . "#ff9fdf")
        (bg-completion . "#502d70")
        (bg-completion-subtle . "#451d65")
        (red . "#ff5f6f")
        (red-alt . "#ff8f6d")
        (red-alt-other . "#ff6f9d")
        (red-faint . "#ffa0a0")
        (red-alt-faint . "#f5aa80")
        (red-alt-other-faint . "#ff9fbf")
        (green . "#51ca5c")
        (green-alt . "#71ca3c")
        (green-alt-other . "#51ca9c")
        (green-faint . "#78bf78")
        (green-alt-faint . "#99b56f")
        (green-alt-other-faint . "#88bf99")
        (yellow . "#f0b262")
        (yellow-alt . "#f0e242")
        (yellow-alt-other . "#d0a272")
        (yellow-faint . "#d2b580")
        (yellow-alt-faint . "#cabf77")
        (yellow-alt-other-faint . "#d0ba95")
        (blue . "#778cff")
        (blue-alt . "#8f90ff")
        (blue-alt-other . "#8380ff")
        (blue-faint . "#82b0ec")
        (blue-alt-faint . "#a0acef")
        (blue-alt-other-faint . "#80b2f0")
        (magenta . "#ff70cf")
        (magenta-alt . "#ff77f0")
        (magenta-alt-other . "#ca7fff")
        (magenta-faint . "#e0b2d6")
        (magenta-alt-faint . "#ef9fe4")
        (magenta-alt-other-faint . "#cfa6ff")
        (cyan . "#30cacf")
        (cyan-alt . "#60caff")
        (cyan-alt-other . "#40b79f")
        (cyan-faint . "#90c4ed")
        (cyan-alt-faint . "#a0bfdf")
        (cyan-alt-other-faint . "#a4d0bb")
        (red-active . "#ff6059")
        (green-active . "#64dc64")
        (yellow-active . "#ffac80")
        (blue-active . "#4fafff")
        (magenta-active . "#cf88ff")
        (cyan-active . "#50d3d0")
        (red-nuanced-bg . "#440a1f")
        (red-nuanced-fg . "#ffcccc")
        (green-nuanced-bg . "#002904")
        (green-nuanced-fg . "#b8e2b8")
        (yellow-nuanced-bg . "#422000")
        (yellow-nuanced-fg . "#dfdfb0")
        (blue-nuanced-bg . "#1f1f5f")
        (blue-nuanced-fg . "#bfd9ff")
        (magenta-nuanced-bg . "#431641")
        (magenta-nuanced-fg . "#e5cfef")
        (cyan-nuanced-bg . "#042f49")
        (cyan-nuanced-fg . "#a8e5e5")
        (bg-diff-heading . "#304466")
        (fg-diff-heading . "#dae7ff")
        (bg-diff-added . "#0a383a")
        (fg-diff-added . "#94ba94")
        (bg-diff-changed . "#2a2000")
        (fg-diff-changed . "#b0ba9f")
        (bg-diff-removed . "#50163f")
        (fg-diff-removed . "#c6adaa")
        (bg-diff-refine-added . "#006a46")
        (fg-diff-refine-added . "#e0f6e0")
        (bg-diff-refine-changed . "#585800")
        (fg-diff-refine-changed . "#ffffcc")
        (bg-diff-refine-removed . "#952838")
        (fg-diff-refine-removed . "#ffd9eb")
        (bg-diff-focus-added . "#1d4c3f")
        (fg-diff-focus-added . "#b4dfb4")
        (bg-diff-focus-changed . "#424200")
        (fg-diff-focus-changed . "#d0daaf")
        (bg-diff-focus-removed . "#6f0f39")
        (fg-diff-focus-removed . "#eebdba")))
#+end_src

* other lisp code
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/other-packages/random-elisp-code")
(require 'yaoni-evil-object)
(require 'yaoni-set-theme-by-mode)
(require 'yaoni-get-buffer-name)
#+end_src

* topsy and org-sticky-header
Add sticky headeer at the top of the window.
#+begin_src emacs-lisp :tangle yes
(use-package topsy
  :straight (:host github :repo "alphapapa/topsy.el")
  :hook (prog-mode . topsy-mode))

(use-package org-sticky-header
  :straight (:host github :repo "alphapapa/org-sticky-header")
  :hook (org-mode . org-sticky-header-mode))
#+end_src

* org-modern

#+begin_src emacs-lisp :tangle yes
(use-package org-modern
  :straight  t
  :init
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   org-export-with-sub-superscripts nil

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"
   org-pretty-entities-include-sub-superscripts nil)
  :config
  (global-org-modern-mode))
#+end_src


#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "~/.emacs.d/other-packages/org-bars")
(require 'org-bars)
(add-hook 'org-mode-hook #'org-bars-mode)
#+end_src

* emacs-maple-preview

#+begin_src emacs-lisp :tangle no
(use-package web-server
  :straight (:host github :repo "eschulte/emacs-web-server"))

(use-package maple-preview
  :straight (:host github :repo "honmaple/emacs-maple-preview" :files ("*.el" "index.html" "static"))
  :init
  ;; only enable preview within some special modes
  (setq maple-preview:allow-modes '(org-mode markdown-mode html-mode web-mode gfm-mode))
  :commands (maple-preview-mode))
#+end_src

* csv-mode
#+begin_src emacs-lisp :tangle yes
(use-package csv-mode
  :straight t)
#+end_src

* blink-search
:LOGBOOK:
CLOCK: [2022-11-09 Wed 17:35]--[2022-11-09 Wed 17:47] =>  0:12
:END:

#+begin_src bash :results output
brew install ripgrep
#+end_src

#+RESULTS:
#+begin_example
==> Downloading https://ghcr.io/v2/homebrew/core/ripgrep/manifests/13.0.0-1
==> Downloading https://ghcr.io/v2/homebrew/core/ripgrep/blobs/sha256:d21429f4b0a97e94f87cf7588958f53b57bf067876377d6a2e7a30259fa94394
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:d21429f4b0a97e94f87cf7588958f53b57bf067876377d6a2e7a30259fa94394?se=2022-11-09T06%3A45%3A00Z&sig=%2FEIeVclOBmdmYhHPZwWIvR%2BykDEmOlaPAj3ACvIGwzU%3D&sp=r&spr=https&sr=b&sv=2019-12-12
==> Pouring ripgrep--13.0.0.arm64_monterey.bottle.1.tar.gz
==> Caveats
zsh completions have been installed to:
  /opt/homebrew/share/zsh/site-functions
==> Summary
🍺  /opt/homebrew/Cellar/ripgrep/13.0.0: 13 files, 5.8MB
==> Running `brew cleanup ripgrep`...
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).
#+end_example

#+begin_src bash :results output
#!/bin/bash
brew install fd
#+end_src

#+RESULTS:
#+begin_example
==> Downloading https://ghcr.io/v2/homebrew/core/fd/manifests/8.5.2
==> Downloading https://ghcr.io/v2/homebrew/core/fd/blobs/sha256:82a08148076268cafd169b92060efe1296a4dd829ba86326f39ed6a81a5a652a
==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:82a08148076268cafd169b92060efe1296a4dd829ba86326f39ed6a81a5a652a?se=2022-11-10T04%3A40%3A00Z&sig=oTrlDlvwJnI90J6uogphF78p%2FeaKNaOMrh8fNFYLWpk%3D&sp=r&spr=https&sr=b&sv=2019-12-12
==> Pouring fd--8.5.2.arm64_monterey.bottle.tar.gz
==> Caveats
zsh completions have been installed to:
  /opt/homebrew/share/zsh/site-functions
==> Summary
🍺  /opt/homebrew/Cellar/fd/8.5.2: 13 files, 2.6MB
==> Running `brew cleanup fd`...
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).
#+end_example


#+begin_src emacs-lisp :tangle yes
(use-package blink-search
  :straight (:host github :repo "manateelazycat/blink-search"
                   :files ("*.py" "*.el"
                           ("backend" "backend/*")
                           ("core" "core/*")
                           ("icons" "icons/*")
                           ("images" "images/*")))
  :ensure t
  :init
  ;; I use Edge as the browser
  (require 'yaoni-blink-search)
  (setq sblink-search-browser-function 'browse-url-macosx-edge-browser)
  (setq blink-search-enable-posframe nil)
  (my-global-leader
    "SPC" 'blink-search))
#+end_src

* separedit
#+begin_src emacs-lisp :tangle yes
(use-package separedit
  :straight  (:host github :repo "twlz0ne/separedit.el" :files ("*.el"))
  :init
  (setq separedit-preserve-string-indentation t)
  (setq separedit-continue-fill-column t)
  (setq separedit-write-file-when-execute-save t)
  (setq separedit-remove-trailing-spaces-in-comment t)
  :config
  (my-global-leader
    "s e" 'separedit-dwim))
#+end_src

* atomic-chrome

#+begin_src emacs-lisp :tangle yes
(use-package atomic-chrome
  :straight t)
#+end_src
